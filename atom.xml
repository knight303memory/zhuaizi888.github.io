<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Killua&#39;s blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://tusko.cn/"/>
  <updated>2017-08-19T02:29:24.788Z</updated>
  <id>http://tusko.cn/</id>
  
  <author>
    <name>Killua</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>UCT搜索算法</title>
    <link href="http://tusko.cn/2016/02/10/UCT%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95/"/>
    <id>http://tusko.cn/2016/02/10/UCT搜索算法/</id>
    <published>2016-02-10T08:05:00.000Z</published>
    <updated>2017-08-19T02:29:24.788Z</updated>
    
    <content type="html"><![CDATA[<h3 id="算法简介"><a href="#算法简介" class="headerlink" title="算法简介"></a>算法简介</h3><h4 id="多臂匪徒"><a href="#多臂匪徒" class="headerlink" title="多臂匪徒"></a>多臂匪徒</h4><p>&#160; &#160; &#160; &#160;UCT算法是UCB策略与蒙特卡罗规划的结合体，在UCB算法中加入蒙特卡罗就形成了我们要介绍的UCT搜索。因此在介绍UCT搜索之前，我们先来了解下UCB策略和蒙特卡罗规划。</p>
<p>&#160; &#160; &#160; &#160;首先，介绍下多臂匪徒问题。多臂匪徒问题就是说，有一个有K个拉手的老虎机，赌徒要从这些拉手中选出一个拉手，从而获得可能值为正值，0，负值的回报。在某个特定时间内，赌徒只能拉动一个拉手。当赌徒在老虎机面前时，他是没有任何头绪的。因为对他而言，每个拉手获得好的回报的概率是一样的，他也不知道该怎么选。他只能不断试探，发现拉手的规律后，推断哪个拉手获得的回报最大。为了让赌徒得到尽可能大的回报，我们需要找到一种策略，UCB策略就是这样一种可以解决多臂匪徒问题的策略。下面就是UCB策略的算法流程图：</p>
<p><img src="/image_save/多臂匪徒.png" alt="多臂匪徒"></p>
<h4 id="蒙特卡罗应用于博弈树"><a href="#蒙特卡罗应用于博弈树" class="headerlink" title="蒙特卡罗应用于博弈树"></a>蒙特卡罗应用于博弈树</h4><p>&#160; &#160; &#160; &#160;蒙特卡罗规划是以蒙特卡罗方法的一种规划。在蒙特卡规划罗建立的博弈树中，从初始状态开始，重复给出抽样，然后扩展到树中的每一个节点。在不围棋中，即是说在选点时，如果对可选点中找出一些较好的节点进行上万，上百万次地模拟，如果采用合适的评估函数 ，那么在这些节点就会聚集大量模拟。在计算机博弈中，蒙特卡罗规划通常用来解决棋子落点问题。蒙特卡罗规划的伪代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">1： while 模拟时间未用完 do</div><div class="line">2：      从当前状态的子节点中选择一个节点</div><div class="line">3：      if 该节点是第一次被访问 then</div><div class="line">4：         利用蒙特卡罗评估，得出胜负结果</div><div class="line">5：          更新相关节点的方向次数和获胜次数</div><div class="line">6：      else </div><div class="line">7：          回到2</div><div class="line">8：      end if</div><div class="line">9： end while</div><div class="line">10:利用合适的方式选择最后的决策结果</div></pre></td></tr></table></figure>
<h4 id="UCT算法原理"><a href="#UCT算法原理" class="headerlink" title="UCT算法原理"></a>UCT算法原理</h4><h5 id="UCT与蒙特卡罗区别"><a href="#UCT与蒙特卡罗区别" class="headerlink" title="UCT与蒙特卡罗区别"></a>UCT与蒙特卡罗区别</h5><p>&#160; &#160; &#160; UCT算法使<strong>UCB策略与蒙特卡罗规划相结合</strong>。它跟蒙特卡罗规则的区别：</p>
<ol>
<li>UCT算法对于可下子点的选择不是随机的，而是根据UCB值来选择的。如果可下点没有被访问，其UCB值无穷大，因为要使这些没有被访问的节点有机会被访问，以便遗漏掉好的可下点。如果可下点被访问过，根据UCB公式计算出UCB值。最终，我们选择UCB值最大的值作为可下点。</li>
<li>模拟结束后选择可下点时，不是根据根据胜率来进行判断，而是根据可下点的访问次数，哪个点被访问的次数最多，哪个点就是我们选择的最终结果。</li>
</ol>
<p>&#160; &#160; &#160; UCT算法通过迭代来逐渐扩展博弈树。逐渐扩展是指，对某一个节点来说，它并不是直接扩展子节点，然后计算结果，而是在扩展节点时先对有可能成为子节点的节点进行评估，然后根据评估结果对子节点排序，最后根据排序顺序扩展子节点。这个评估结果的值就是 上面提到的UCB值。</p>
<p>&#160; &#160; &#160; UCB值兼顾探勘(exploitation)和探测(exploration)，这体现在UCB值既要考虑胜率高的节点又要考虑很少被访问的节点。UCB探勘胜率高的好节点，来拓展搜索的深度，进一步确认该节点是好节点；探测很少被访问到的节点，来扩展搜索的宽度，寻找一开始没找到的好节点。</p>
<p>&#160; &#160; &#160; 由此可知，节点的胜率越高或者越少被访问，那么这个节点UCB值就越高。UCB公式如下：</p>
<h5 id="UCB公式"><a href="#UCB公式" class="headerlink" title="UCB公式"></a>UCB公式</h5><p><img src="/image_save/ucb公式.png" alt="ucb公式"></p>
<p>&#160; &#160; &#160;在这个公式中， Wi表示子节点i的胜利次数，Ni表示子节点 i的访问次数，Np表示节点 p 的访问次數，Cbias是一個常数。最后节点p 会选择分数最高的子节点。此公式左边是探勘的部分，分数越高表示此节点胜率越高，之后被访问的几率也越高。右边部分是探索的部分，当节点 p 访问次数增加后，其访问次数越低的子节点在此部分就会得到越高的评估值，使其有机会被访问到。常数 Cbias是用來決定要重探勘还是重探索。</p>
<h5 id="UCT流程图"><a href="#UCT流程图" class="headerlink" title="UCT流程图"></a>UCT流程图</h5><p><img src="/image_save/ucb公式.png" alt="uct流程图"></p>
<h3 id="UCT搜索伪代码"><a href="#UCT搜索伪代码" class="headerlink" title="UCT搜索伪代码"></a>UCT搜索伪代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">PlayRandGame: 双方根据规则随机交替落子</div><div class="line">UpdateTree:更新UctTree的节点访问次数及相关收益</div><div class="line">ExpandNode:扩展子节点</div><div class="line">UCT核心伪代码如下:</div><div class="line">UctNode UctPlay(UctTree tree)</div><div class="line">&#123;</div><div class="line">	UctNode *current = &amp;tree.m_node;//从UCT树中取出当前局面作当前节点</div><div class="line">	while(!OverTimeLimit())</div><div class="line">	&#123;//若未超过时间限制</div><div class="line">		if (current.HasChild())</div><div class="line">		&#123;//当前节点是叶子点</div><div class="line">			UctState state = PlayRandGame(*current);//进行蒙特卡罗模拟</div><div class="line">			UpdateTree(state);//根据随机模拟结果更新UctTree访问及收益</div><div class="line">			if (current.m_visitor &gt; N)</div><div class="line">			&#123;   //若该节点访问次数到一定次数N</div><div class="line">				ExpandNode(*current);//展开子节点</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		else</div><div class="line">		&#123;//当前节点不是叶子节点</div><div class="line">			current = FindBestChild(*current);//取UCB最大的子节点作当前节点</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	return tree.FindBestNode();返回树中访问次数最多的节点</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;算法简介&quot;&gt;&lt;a href=&quot;#算法简介&quot; class=&quot;headerlink&quot; title=&quot;算法简介&quot;&gt;&lt;/a&gt;算法简介&lt;/h3&gt;&lt;h4 id=&quot;多臂匪徒&quot;&gt;&lt;a href=&quot;#多臂匪徒&quot; class=&quot;headerlink&quot; title=&quot;多臂匪徒&quot;&gt;&lt;/a
    
    </summary>
    
      <category term="计算机博弈" scheme="http://tusko.cn/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8D%9A%E5%BC%88/"/>
    
    
      <category term="计算机博弈" scheme="http://tusko.cn/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8D%9A%E5%BC%88/"/>
    
      <category term="计算机博弈算法" scheme="http://tusko.cn/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8D%9A%E5%BC%88%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>AlphaBeta剪枝算法</title>
    <link href="http://tusko.cn/2016/01/03/alphabeta%E5%89%AA%E6%9E%9D%E7%AE%97%E6%B3%95/"/>
    <id>http://tusko.cn/2016/01/03/alphabeta剪枝算法/</id>
    <published>2016-01-02T16:00:02.000Z</published>
    <updated>2017-08-19T02:28:54.441Z</updated>
    
    <content type="html"><![CDATA[<h3 id="算法简介"><a href="#算法简介" class="headerlink" title="算法简介"></a>算法简介</h3><h4 id="AlphaBeta剪枝算法"><a href="#AlphaBeta剪枝算法" class="headerlink" title="AlphaBeta剪枝算法"></a>AlphaBeta剪枝算法</h4><p>&#160; &#160; &#160; &#160;极大极小值搜索算法计算的是整个博弈搜索树的复杂度，对国际跳棋而言假设每个局面只有9个走步，搜索10层的情况下就有9^10个博弈树节点需要探索，在优先的计算机资源下，无论从时间还是空间上来看，都是不可以接受的。AlphaBeta搜索算法就是用来解决来剪枝掉一些不必要的节点。 </p>
<p>&#160; &#160; &#160; &#160;Alpha-Beta剪枝算法是建立在MiniMax算法基础上的，其特点是在博弈树上进行搜索时加上了alpha剪枝和beta剪枝。以下为alpha剪枝和beta剪枝示例：</p>
<p><img src="/image_save/alpha剪枝.png" alt="alpha剪枝"></p>
<p><img src="/image_save/beta剪枝.png" alt="beta剪枝"></p>
<p>&#160; &#160; &#160; &#160;如上图，<strong>其中正方形节点取极大值，圆形节点取极小值</strong>。图（a）中节点B的估值为18,节点C取极小值，则取节点D、E、F中最小估值的。由于节点D的估值为16，则节点C取值小于等于16。但是最终节点A取极大值在节点B、C中，所以，节点A一定取的为节点B的值18。那么，节点E、F不必进行估值搜索。因此C-E，C-F分支及节点C的子节点的分支全部被alpha剪枝。</p>
<p>&#160; &#160; &#160; &#160;图(b)中节点B估值为8，节点C取极大值，取节点D、E、F中最大估值的。节点D的估值18，则节点C的估值大于或等于18。但是节点A取极小值，所以节点A取节点B的值。节点C的其他分支被beta剪枝。</p>
<p>&#160; &#160; &#160; &#160;Alpha-Beta 剪枝算法的效率很大程度上依赖于节点的排列，在理想状态的排序下,最大效率前提，可以使搜索节点的数量减小一半，这样就能提高搜索速率，从而使在相同时间下的搜索深度增加一倍。可能读者以为提升一层深度有什么了不起，如果了解指数爆炸我们就知道这是巨大的提升，带来的是更快的速率。</p>
<p>&#160; &#160; &#160; &#160;算法使用了两个值，分别为alpha和beta，alpha和beta的意义分别代表最佳得分的最小下界和最大上界，即是最好的值和最差的值。最初alpha，beta被设为无穷大和无穷小，伴随着搜索的不断进行，这个上界和下界在不断博弈的情况下逐渐收敛成为一个相对较优的值。</p>
<p>（1）任何max节点的alpha值大于其父节点的beta值，则把该节点剩余的枝剪下去，因为这说明该节点之前至少有一个节点alpha值比它的上界还要小，也就是无论如何这个值比现有最坏情况还要坏，对敌方而言，所以敌方不会选这个路径作为最好走步，反之如果选择了，则他选择的是更坏的走步。而父节点是min节点，所以这个节点显然不是min节点所想要的。或者说这个节点对对手非常有利。<br>（2）同理任何min节点的beta值小于父节点alpha值，则把该节点剩余的枝剪去。</p>
<h3 id="伪代码"><a href="#伪代码" class="headerlink" title="伪代码"></a>伪代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">int Alpha_Beta(nDepth, nAlpha, nBeta)</div><div class="line">&#123;</div><div class="line">	int score;</div><div class="line">	if(Game Over)</div><div class="line">		return Eveluation;// 游戏结束返回估值</div><div class="line">	</div><div class="line">	if(nDepth == 0)</div><div class="line">		return Eveluation;// 叶子节点返回估值</div><div class="line">	</div><div class="line">	if(IsMini Node)// 当为取极小值的节点</div><div class="line">	&#123;</div><div class="line">		for(each possible move m)</div><div class="line">		&#123;</div><div class="line">			make move m;</div><div class="line">			score = Alpha_Beta(nDepth-1, nAlpha, nBeta);// 递归搜索子节点</div><div class="line">			unmake move m;</div><div class="line">			if(score &lt; nBeta)</div><div class="line">			&#123;</div><div class="line">				nBeta = score; // 取极小值</div><div class="line">				if(nAlpha &gt;= nBeta)// alpha剪枝</div><div class="line">					return nAlpha;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	else</div><div class="line">	&#123;</div><div class="line">		for(each possible move m)</div><div class="line">		&#123;</div><div class="line">			make move m;</div><div class="line">			score = Alpha_Beta(nDepth-1, nAlpha, nBeta);// 递归搜索子节点</div><div class="line">			unmake move m;</div><div class="line">			if(score &gt; nAlpha)</div><div class="line">			&#123;</div><div class="line">				nAlpha = score; // 取极大值</div><div class="line">				if(nAlpha &gt;= nBeta)// beta 剪枝</div><div class="line">					return nBeta;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	return nAlpha;// 返回极大值</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;算法简介&quot;&gt;&lt;a href=&quot;#算法简介&quot; class=&quot;headerlink&quot; title=&quot;算法简介&quot;&gt;&lt;/a&gt;算法简介&lt;/h3&gt;&lt;h4 id=&quot;AlphaBeta剪枝算法&quot;&gt;&lt;a href=&quot;#AlphaBeta剪枝算法&quot; class=&quot;headerlink
    
    </summary>
    
      <category term="计算机博弈" scheme="http://tusko.cn/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8D%9A%E5%BC%88/"/>
    
    
      <category term="计算机博弈" scheme="http://tusko.cn/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8D%9A%E5%BC%88/"/>
    
      <category term="计算机博弈算法" scheme="http://tusko.cn/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8D%9A%E5%BC%88%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>极大值极小值算法</title>
    <link href="http://tusko.cn/2015/10/06/%E6%9E%81%E5%A4%A7%E5%80%BC%E6%9E%81%E5%B0%8F%E5%80%BC%E7%AE%97%E6%B3%95/"/>
    <id>http://tusko.cn/2015/10/06/极大值极小值算法/</id>
    <published>2015-10-06T07:38:46.000Z</published>
    <updated>2017-08-06T08:57:18.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="算法简介"><a href="#算法简介" class="headerlink" title="算法简介"></a>算法简介</h3><h4 id="极大值极小值算法"><a href="#极大值极小值算法" class="headerlink" title="极大值极小值算法"></a>极大值极小值算法</h4><p>&#160; &#160; &#160; &#160;在计算机博弈中，极大极小搜索算法是一种简单常见、便于理解的启发式搜索。因此在介绍极大极小搜索之前，我们先来介绍启发式搜索。</p>
<p>&#160; &#160; &#160; &#160;盲目搜索解决可以穷尽的问题。但事实上，这种理论上可以穷尽的搜索问题并不常见，我们见到更多的搜索问题状态空间往往是无法穷尽的，因此此时就会使用启发式搜索。这种启发式搜索只搜索博弈树中的一部分，然后采用启发方式引导博弈往利于己方获胜的方向发展。计算机通常会研究并发现一系列规则来形成启发方式，然后选择出一条可以解决问题的最佳路径。</p>
<p>&#160; &#160; &#160; &#160;极大极小搜索是一种在有限深度内搜索的启发式搜索。这里，我们用一个形象的例子来说明极大极小搜索。甲、乙两位玩家玩一个不清楚规则的游戏。在游戏过程中，甲方希望获得尽可能高的分数，而乙方恰恰希望甲方获得尽可能低的分数。这个游戏过程即是说：甲方在玩游戏时应尽量让自己的分数变大，而乙方则尽量让甲方分数变低。游戏中甲、乙双方使分数极大极小的过程就是极大极小搜索。</p>
<p>&#160; &#160; &#160; &#160;极大极小值算法是根据零和博弈的特点，在与对手的博弈中，模拟整个博弈的过程。在己方的所有决策中找出相对于自己最大收益的决策；假设我方能知道对方的所有决策，根据我方判断，在对手的决策所有决策中找到使己方最小收益的决策。</p>
<p>以下为一棵极大极小值搜索树:</p>
<p><img src="/images/极大极小值算法_1.png" alt="极大极小值搜索树"></p>
<p>&#160; &#160; &#160; &#160;如上图所示，它是一棵以当前局面为根节点而展开的5层博弈树，我们把偶数层记为Max层，把奇数层记为Min层，当博弈树扩展到叶子节点后，自底向上，我们倒推每个节点的值。如果父节点是在Max层，通过比较后，将子节点中的最大值赋给它；而如果是在Min层，通过比较后，将它节点中的最小值赋给它。递归进行，最终可以得知根节点的哪个子节点能让自己的局面优势最大或者说让对方的哪个局面优势最小。</p>
<p>以下是一棵二人博弈树:<br><img src="/images/二人博弈树.png" alt="二人博弈树"></p>
<p>&#160; &#160; &#160; &#160;根节点为A，其子节点B、C、D分别为我方产生一种行为后形成的另一种局面，节点E、F、G、H、I分别是对方在其父节点上产生一种行为后形成的局面。<br>&#160; &#160; &#160; &#160;通过极大极小值算法对该博弈树进行搜索之前，首先需要对此博弈树的叶子节点进行估值，假设其叶子节点估值如下：</p>
<p><img src="/images/二人博弈树估值.png" alt="二人博弈树估值"></p>
<p>&#160; &#160; &#160; &#160;根据极大极小值算法的原理，在第三层为对方产生行为后形成的局面，取极小值。节点B取节点E、F、G中估值最小的，所以节点B的估值为节点G的估值，为-11；节点D的估值为节点H、I中估值最小的，为-999；在第二层中为我方产生行为后形成的局面，则取极大值。此时，节点B估值为-11，节点C估值为-100，节点D估值为-999。则取节点B、C、D中估值最大的，所以节点A取节点B的估值。最后，我方取的最终行为是产生节点B局面的行为。<br>&#160; &#160; &#160; &#160;另外，极大极小值算法是基于静态估值函数的，且其博弈树的深度是有限的，到设定的深度后需返回其叶子节点的估值。</p>
<p>极小值算法伪代码:<br><img src="/images/极小值算法伪代码.png" alt="极小值算法伪代码"></p>
<p>极大值算法伪代码:<br><img src="/images/极大值算法伪代码.png" alt="极大值算法伪代码"></p>
<h4 id="负极大值算法"><a href="#负极大值算法" class="headerlink" title="负极大值算法"></a>负极大值算法</h4><p>&#160; &#160; &#160; &#160;当极大极小搜索应用于双人棋类博弈时，负极大搜索算法是其的简单变形。根据博弈的定义，对于同一个盘面，甲方对其评估值总是乙方对其评估值的相反数。因此，当前盘面的落子一方需要从所有下一个盘面评估值的相反数中取极大值，而下一个盘面评估值必须按照对手来评估。并且，该搜索步骤对于甲、乙双方均适用。负极大搜索算法与极小极大搜索算法具有相同的复杂度，只是简化了代码量，并没有对搜索节点数目进行缩减，下面我们讨论的负极大值搜索算法就对树的节点进行了剪枝，减小了搜索复杂度。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;算法简介&quot;&gt;&lt;a href=&quot;#算法简介&quot; class=&quot;headerlink&quot; title=&quot;算法简介&quot;&gt;&lt;/a&gt;算法简介&lt;/h3&gt;&lt;h4 id=&quot;极大值极小值算法&quot;&gt;&lt;a href=&quot;#极大值极小值算法&quot; class=&quot;headerlink&quot; title=&quot;极
    
    </summary>
    
      <category term="计算机博弈" scheme="http://tusko.cn/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8D%9A%E5%BC%88/"/>
    
    
      <category term="计算机博弈" scheme="http://tusko.cn/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8D%9A%E5%BC%88/"/>
    
      <category term="计算机博弈算法" scheme="http://tusko.cn/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8D%9A%E5%BC%88%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>极大极小值算法-井字棋实现</title>
    <link href="http://tusko.cn/2015/08/30/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E5%80%BC%E4%BA%95%E5%AD%97%E6%A3%8B/"/>
    <id>http://tusko.cn/2015/08/30/极大极小值井字棋/</id>
    <published>2015-08-30T03:59:41.000Z</published>
    <updated>2017-08-06T08:55:00.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="项目说明"><a href="#项目说明" class="headerlink" title="项目说明"></a>项目说明</h3><p>&#160; &#160; &#160; &#160;在玩家之间玩井字棋，基本上只会出现平局的结果，那么如何让计算机也能模拟人那样，思考并择优下棋，便涉及到计算机博弈的相关知识了，主要知识如下:</p>
<ol>
<li>棋盘表示</li>
<li>博弈树</li>
<li>估值与搜索算法</li>
</ol>
<h4 id="棋盘表示"><a href="#棋盘表示" class="headerlink" title="棋盘表示"></a>棋盘表示</h4><p>对于井字棋，采用3*3的二维数组.<br>因为数组根据下标定位，访问数组任一点的复杂度为O(1).</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#define COM -1   </div><div class="line">#define MAN 1</div></pre></td></tr></table></figure>
<p>其中0,1,-1分别表示棋盘上的空位,人下棋,计算机下棋.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//棋盘  </div><div class="line">int board[3][3] = &#123; &#123; 0,0,0 &#125;,  </div><div class="line">                    &#123; 0,0,0 &#125;,  </div><div class="line">                    &#123; 0,0,0 &#125;  </div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h4 id="博弈树"><a href="#博弈树" class="headerlink" title="博弈树"></a>博弈树</h4><p>其次,假设有两人对弈,我们将其中一位叫做甲,另一位叫做乙.假定现在该甲走棋,甲可以有40种走法(不论好坏),而对甲的任一走法,乙也可以有与之相对的若干种走法.然后又轮到甲走棋,对乙的走法甲又有若干种方法应对…如此往复</p>
<p>而所有这些走法罗列出来,在计算机中构成一棵博弈树,节点根部为棋局的初始局面,根的子节点为甲所有可能的走法构成的新局面,而这些子节点的子节点则是与之相对的乙所有可能的走法构成的局面.而这些节点的末梢,是结束的棋局,即甲胜或者乙胜或者是平局.示例图如下:</p>
<p><img src="/images/井字棋博弈树.png" alt="井字棋博弈树"></p>
<p>再者,计算机是不会像人那样思考的,要实现计算机的只能,必须依靠算法实现.最常见的算法便是搜索算法,即搜索所有可能出现的局面,在其中选择一个能获胜的局面下棋.但这样是不现实的,因为每一步棋产生的局面实在太多,如19路围棋,其走法用最顶级的计算机来算,算到地球毁灭都不一定算得完.而其他棋类也有类似的情况,计算机没有足够资源在可行时间内穷尽所有走法.</p>
<p>传统的搜索算法不可行,那么计算机要通过什么样的方式得到最优局面呢?</p>
<p>是剪枝算法,在搜索中依据一个函数对不必要搜索节点进行过滤,剪枝.这个函数即评估函数,这种搜索算法称为启发式搜索.</p>
<p>而评估函数的好坏直接决定搜索的效率快慢.</p>
<p>博弈树中最基础的搜索算法,是基于深度优先搜索的极大值极小值算法.这里的极大极小值算法是相对而言的,在某一局面中,若甲胜取极大,甲负取极小,则甲要选择评估函数值尽量大的局面,而乙正好相反.</p>
<p><strong>关于极大值极小值算法,可以参考[这篇文章].</strong></p>
<h4 id="井字棋的评估函数"><a href="#井字棋的评估函数" class="headerlink" title="井字棋的评估函数"></a>井字棋的评估函数</h4><p>评估函数没有定式,是否合理准确只有通过实战检验.假设一个新同学读学长写的代码场景,新同学可能会问,为什么这个估值为什么是0.5,而另一个程序是0.8呢?为什么你的程序这样评估局面,而网上的程序是那样子的?这就是仁者见仁,智者见智了,评估函数的实现与开发者的对棋牌规则了解程度、想法、心情不同而有所差异.但是只有抓住耗子的猫才是好猫~</p>
<p><strong>这里给出一种井字棋的评估函数:</strong><br>将当前局面填满自己的子,然后以有双方连成3棋子的行,列,斜相减得到的值来评估局面的好坏.代码如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">//评估函数  </div><div class="line">int evaluteMap() &#123;  </div><div class="line">  </div><div class="line">    bool flag = true;  </div><div class="line">    int i, j;  </div><div class="line">  </div><div class="line">    if (isWin() == COM)  </div><div class="line">        return MAX_NUM;//如果计算机赢了，返回最大值   </div><div class="line">    if (isWin() == MAN)  </div><div class="line">        return -MAX_NUM;//如果计算机输了，返回最小值   </div><div class="line"> </div><div class="line">    int count = 0;//该变量用来表示评估函数的值  </div><div class="line">                  //将棋盘中的空格填满自己的棋子，既将棋盘数组中的0变为1  </div><div class="line">    for (i = 0; i &lt; 3; i++)  </div><div class="line">        for (j = 0; j &lt; 3; j++)  </div><div class="line">        &#123;  </div><div class="line">            if (board[i][j] == 0)  </div><div class="line">                tempBoard[i][j] = COM;  </div><div class="line">            else  </div><div class="line">                tempBoard[i][j] = board[i][j];  </div><div class="line">        &#125;  </div><div class="line">    //电脑一方  </div><div class="line">    //计算每一行中有多少行的棋子连成3个的  </div><div class="line">    for (i = 0; i &lt; 3; i++)  </div><div class="line">        count += (tempBoard[i][0] + tempBoard[i][1] + tempBoard[i][2]) / 3;  </div><div class="line">    for (i = 0; i &lt; 3; i++)  </div><div class="line">        count += (tempBoard[0][i] + tempBoard[1][i] + tempBoard[2][i]) / 3;  </div><div class="line">    count += (tempBoard[0][0] + tempBoard[1][1] + tempBoard[2][2]) / 3;  </div><div class="line">    count += (tempBoard[2][0] + tempBoard[1][1] + tempBoard[0][2]) / 3;  </div><div class="line">  </div><div class="line">    //将棋盘中的空格填满对方的棋子，既将棋盘数组中的0变为-1  </div><div class="line">    for (i = 0; i &lt; 3; i++)  </div><div class="line">        for (j = 0; j &lt; 3; j++)  </div><div class="line">        &#123;  </div><div class="line">            if (board[i][j] == 0)  </div><div class="line">                tempBoard[i][j] = MAN;  </div><div class="line">            else tempBoard[i][j] = board[i][j];  </div><div class="line">        &#125;  </div><div class="line">    //对方  </div><div class="line">    //计算每一行中有多少行的棋子连成3个的  </div><div class="line">    for (i = 0; i &lt; 3; i++)  </div><div class="line">        count += (tempBoard[i][0] + tempBoard[i][1] + tempBoard[i][2]) / 3;  </div><div class="line">    for (i = 0; i &lt; 3; i++)  </div><div class="line">        count += (tempBoard[0][i] + tempBoard[1][i] + tempBoard[2][i]) / 3;  </div><div class="line">    count += (tempBoard[0][0] + tempBoard[1][1] + tempBoard[2][2]) / 3;  </div><div class="line">    count += (tempBoard[2][0] + tempBoard[1][1] + tempBoard[0][2]) / 3;  </div><div class="line">  </div><div class="line">    return count;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="程序实现"><a href="#程序实现" class="headerlink" title="程序实现"></a>程序实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div></pre></td><td class="code"><pre><div class="line">#include &lt;stdio.h&gt;</div><div class="line">#include &lt;conio.h&gt; </div><div class="line">#define COM -1 </div><div class="line">#define MAN 1</div><div class="line">#define STEP 9 </div><div class="line">#define DRAW 0 </div><div class="line">#define ROW 3 </div><div class="line">#define COL 3</div><div class="line">#define MAX_NUM 1000;</div><div class="line"></div><div class="line"></div><div class="line">struct Move</div><div class="line">&#123;</div><div class="line">	int x;</div><div class="line">	int y;</div><div class="line"></div><div class="line">&#125;;</div><div class="line"></div><div class="line">//棋盘</div><div class="line">int board[3][3] = &#123; &#123; 0,0,0 &#125;,</div><div class="line">					&#123; 0,0,0 &#125;,</div><div class="line">					&#123; 0,0,0 &#125;</div><div class="line">&#125;;</div><div class="line">int tempBoard[3][3] = &#123; &#123; 0,0,0 &#125;,</div><div class="line">						&#123; 0,0,0 &#125;,</div><div class="line">						&#123; 0,0,0 &#125;</div><div class="line">&#125;;</div><div class="line">//玩家</div><div class="line">int player = MAN;</div><div class="line">//最好的一步</div><div class="line">Move bestMove;</div><div class="line">//当前深度</div><div class="line">int currentDepth;</div><div class="line">//谁先走</div><div class="line">bool MAN_first = true;</div><div class="line"></div><div class="line"></div><div class="line">//判断输赢</div><div class="line">int isWin() &#123;</div><div class="line">	int i, j;</div><div class="line"></div><div class="line">	for (int i = 0; i &lt; 3; i++)</div><div class="line">	&#123;</div><div class="line">		if (board[i][0] + board[i][1] + board[i][2] == 3)</div><div class="line">			return 1;</div><div class="line">		else if (board[i][0] + board[i][1] + board[i][2] == -3)</div><div class="line">			return -1;</div><div class="line">	&#125;</div><div class="line">	for (int j = 0; j &lt; 3; j++)</div><div class="line">	&#123;</div><div class="line">		if (board[0][j] + board[1][j] + board[2][j] == 3)</div><div class="line">			return 1;</div><div class="line">		else if (board[0][j] + board[1][j] + board[2][j] == -3)</div><div class="line">			return -1;</div><div class="line">	&#125;</div><div class="line">	if (board[0][0] + board[1][1] + board[2][2] == 3 || board[0][2] + board[1][1] + board[2][0] == 3)</div><div class="line">		return 1;</div><div class="line">	else if (board[0][0] + board[1][1] + board[2][2] == -3 || board[0][2] + board[1][1] + board[2][0] == -3)</div><div class="line">		return -1;</div><div class="line">	else  return 0;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">//评估函数</div><div class="line">int evaluteMap() &#123;</div><div class="line"></div><div class="line">	bool flag = true;</div><div class="line">	int i, j;</div><div class="line"></div><div class="line">	if (isWin() == COM)</div><div class="line">		return MAX_NUM;//如果计算机赢了，返回最大值 </div><div class="line">	if (isWin() == MAN)</div><div class="line">		return -MAX_NUM;//如果计算机输了，返回最小值 </div><div class="line"></div><div class="line"></div><div class="line">	int count = 0;//该变量用来表示评估函数的值</div><div class="line">				  //将棋盘中的空格填满自己的棋子，既将棋盘数组中的0变为1</div><div class="line">	for (i = 0; i &lt; 3; i++)</div><div class="line">		for (j = 0; j &lt; 3; j++)</div><div class="line">		&#123;</div><div class="line">			if (board[i][j] == 0)</div><div class="line">				tempBoard[i][j] = COM;</div><div class="line">			else</div><div class="line">				tempBoard[i][j] = board[i][j];</div><div class="line">		&#125;</div><div class="line">	//电脑一方</div><div class="line">	//计算每一行中有多少行的棋子连成3个的</div><div class="line">	for (i = 0; i &lt; 3; i++)</div><div class="line">		count += (tempBoard[i][0] + tempBoard[i][1] + tempBoard[i][2]) / 3;</div><div class="line">	for (i = 0; i &lt; 3; i++)</div><div class="line">		count += (tempBoard[0][i] + tempBoard[1][i] + tempBoard[2][i]) / 3;</div><div class="line">	count += (tempBoard[0][0] + tempBoard[1][1] + tempBoard[2][2]) / 3;</div><div class="line">	count += (tempBoard[2][0] + tempBoard[1][1] + tempBoard[0][2]) / 3;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">	//将棋盘中的空格填满对方的棋子，既将棋盘数组中的0变为-1</div><div class="line">	for (i = 0; i &lt; 3; i++)</div><div class="line">		for (j = 0; j &lt; 3; j++)</div><div class="line">		&#123;</div><div class="line">			if (board[i][j] == 0)</div><div class="line">				tempBoard[i][j] = MAN;</div><div class="line">			else tempBoard[i][j] = board[i][j];</div><div class="line">		&#125;</div><div class="line">	//对方</div><div class="line">	//计算每一行中有多少行的棋子连成3个的</div><div class="line">	for (i = 0; i &lt; 3; i++)</div><div class="line">		count += (tempBoard[i][0] + tempBoard[i][1] + tempBoard[i][2]) / 3;</div><div class="line">	for (i = 0; i &lt; 3; i++)</div><div class="line">		count += (tempBoard[0][i] + tempBoard[1][i] + tempBoard[2][i]) / 3;</div><div class="line">	count += (tempBoard[0][0] + tempBoard[1][1] + tempBoard[2][2]) / 3;</div><div class="line">	count += (tempBoard[2][0] + tempBoard[1][1] + tempBoard[0][2]) / 3;</div><div class="line">	</div><div class="line">	return count;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">void makeMove(Move curMove)</div><div class="line">&#123;</div><div class="line">	board[curMove.x][curMove.y] = player;</div><div class="line">	player = (player == COM) ? MAN : COM;</div><div class="line">&#125;</div><div class="line"></div><div class="line">void unMakeMove(Move curMove) &#123;</div><div class="line">	board[curMove.x][curMove.y] = 0;</div><div class="line">	player = (player == COM) ? MAN : COM;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//得到有空位的集合</div><div class="line">int getMoveList(Move moveList[]) &#123;</div><div class="line">	int moveCount = 0;</div><div class="line">	int i, j;</div><div class="line">	for (i = 0; i &lt; COL; i++)</div><div class="line">	&#123;</div><div class="line">		for (j = 0; j &lt; ROW; j++)</div><div class="line">		&#123;</div><div class="line">			if (board[i][j] == 0)</div><div class="line">			&#123;</div><div class="line">				moveList[moveCount].x = i;</div><div class="line">				moveList[moveCount].y = j;</div><div class="line">				moveCount++;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	return moveCount; //返回一共多少个空的位置 </div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">int miniMaxsearch(int depth)</div><div class="line">&#123;</div><div class="line">	int value;  //估值 </div><div class="line">	int bestValue = 0; //最好的估值</div><div class="line">	int moveCount = 0;</div><div class="line">	int i; int m, n;</div><div class="line">	Move moveList[9];//保存可以下子的位置</div><div class="line">	if (isWin() == COM || isWin() == MAN)</div><div class="line">	&#123;</div><div class="line">		return evaluteMap();  //一般是返回极大极小值</div><div class="line">	&#125;</div><div class="line">	//如果搜索深度耗尽 ， 返回估值 </div><div class="line">	if (depth == 0)</div><div class="line">	&#123;</div><div class="line">		return evaluteMap();</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">	//根据不同的玩家 进行赋值 </div><div class="line">	if (COM == player) &#123;</div><div class="line">		bestValue = -MAX_NUM;</div><div class="line">	&#125;</div><div class="line">	else if (MAN == player)</div><div class="line">	&#123;</div><div class="line">		bestValue = MAX_NUM;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	//一共多少步</div><div class="line">	moveCount = getMoveList(moveList);</div><div class="line"></div><div class="line">	for (i = 0; i &lt; moveCount; i++)</div><div class="line">	&#123;</div><div class="line">		Move curMove = moveList[i];</div><div class="line"></div><div class="line">		makeMove(curMove);</div><div class="line">		value = miniMaxsearch(depth - 1);</div><div class="line">		unMakeMove(curMove);</div><div class="line"></div><div class="line">		if (player == COM)</div><div class="line">		&#123;</div><div class="line">			if (value &gt; bestValue)</div><div class="line">			&#123;</div><div class="line">				bestValue = value;</div><div class="line">				if (depth == currentDepth)</div><div class="line">				&#123;</div><div class="line">					bestMove = curMove;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		else if (player == MAN)</div><div class="line">		&#123;</div><div class="line">			if (value &lt; bestValue)</div><div class="line">			&#123;</div><div class="line">				bestValue = value;</div><div class="line">				if (depth == currentDepth)</div><div class="line">				&#123;</div><div class="line">					bestMove = curMove;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">	 </div><div class="line">	return bestValue;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">//打印棋盘 电脑X  ，玩家O </div><div class="line">void printBoard() &#123;</div><div class="line">	int i, j;</div><div class="line">	for (i = 0; i &lt; COL; i++)</div><div class="line">	&#123;</div><div class="line">		printf(&quot;-------------\n&quot;);</div><div class="line">		for (j = 0; j &lt; ROW; j++)</div><div class="line">		&#123;</div><div class="line">			if (board[i][j] == COM)</div><div class="line">			&#123;</div><div class="line">				printf(&quot;| X &quot;);</div><div class="line">			&#125;</div><div class="line">			else if (board[i][j] == MAN)</div><div class="line">			&#123;</div><div class="line">				printf(&quot;| O &quot;);</div><div class="line">			&#125;</div><div class="line">			else</div><div class="line">			&#123;</div><div class="line">				printf(&quot;|   &quot;);</div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125;</div><div class="line">		printf(&quot;|\n&quot;);</div><div class="line">	&#125;</div><div class="line">	printf(&quot;-------------\n&quot;);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">void com_play() &#123;</div><div class="line">	miniMaxsearch(currentDepth);</div><div class="line">	board[bestMove.x][bestMove.y] = COM;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">void man_play() &#123;</div><div class="line">	int x, y;</div><div class="line">	printf(&quot;请输入位置坐标  e.g ：（0 0）为左上角 （2，2）为右下角 \n&quot;);</div><div class="line">	scanf(&quot;%d&quot;, &amp;x);</div><div class="line">	scanf(&quot;%d&quot;, &amp;y);</div><div class="line"></div><div class="line">	while (x &lt; 0 || x &gt; 2 || y &lt; 0 || y &gt; 2)</div><div class="line">	&#123;</div><div class="line">		printf(&quot;您输入的坐标错误，请重新输入:x:(0~2) , y:(0~2)\n&quot;);</div><div class="line">		scanf(&quot;%d&quot;, &amp;x);</div><div class="line">		scanf(&quot;%d&quot;, &amp;y);</div><div class="line">	&#125;</div><div class="line">	while (board[x][y] != 0)</div><div class="line">	&#123;</div><div class="line">		printf(&quot;该位置已有棋，请重新输入:\n&quot;);</div><div class="line">		scanf(&quot;%d&quot;, &amp;x);</div><div class="line">		scanf(&quot;%d&quot;, &amp;y);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	board[x][y] = MAN;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">void setFirst() &#123;</div><div class="line">	char c;</div><div class="line">	printf(&quot;\nDo you want to play first? y -你先走  , n-电脑先走&quot;);</div><div class="line">	for (c = getche(); c != &apos;Y&apos;&amp;&amp;c != &apos;y&apos;&amp;&amp;c != &apos;N&apos;&amp;&amp;c != &apos;n&apos;; c = getche());</div><div class="line">	if (c == &apos;n&apos; || c == &apos;N&apos;) &#123;</div><div class="line">		MAN_first = false;</div><div class="line">	&#125;</div><div class="line">	printf(&quot;\n&quot;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">void main()</div><div class="line">&#123;</div><div class="line">	currentDepth = 9;</div><div class="line">	int step = 1;</div><div class="line">	setFirst();</div><div class="line">	printBoard();</div><div class="line"></div><div class="line">	if (MAN_first) &#123;</div><div class="line">		player = MAN;</div><div class="line">		for (step = 1; step &lt;= STEP; )</div><div class="line">		&#123;</div><div class="line">			man_play();</div><div class="line">			printBoard();</div><div class="line">			if (player == isWin()) &#123;</div><div class="line">				printf(&quot;您获胜了！！&quot;);</div><div class="line">				break;</div><div class="line">			&#125;</div><div class="line">			step++;</div><div class="line">			currentDepth--;</div><div class="line">			if (step == 10) &#123;</div><div class="line">				printf(&quot;平局 ~~~&quot;);</div><div class="line">				break;</div><div class="line">			&#125;</div><div class="line">			player = (player == COM) ? MAN : COM;</div><div class="line">			com_play();</div><div class="line">			printBoard();</div><div class="line">			if (player == isWin()) &#123;</div><div class="line">				printf(&quot;很遗憾，电脑赢啦！！！&quot;);</div><div class="line">				break;</div><div class="line">			&#125;</div><div class="line">			step++;</div><div class="line">			currentDepth--;</div><div class="line">			player = (player == COM) ? MAN : COM;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	else</div><div class="line">	&#123;</div><div class="line">		player = COM;</div><div class="line">		for (step = 1; step &lt;= STEP; )</div><div class="line">		&#123;</div><div class="line">			com_play();</div><div class="line"></div><div class="line">			printBoard();</div><div class="line">			if (player == isWin()) &#123;</div><div class="line">				printf(&quot;很遗憾，电脑赢啦！！！&quot;);</div><div class="line">				break;</div><div class="line">			&#125;</div><div class="line">			step++;</div><div class="line">			currentDepth--;</div><div class="line">			if (step == 10) &#123;</div><div class="line">				printf(&quot;平局 ~~~&quot;);</div><div class="line">				break;</div><div class="line">			&#125;</div><div class="line">			player = (player == COM) ? MAN : COM;</div><div class="line">			man_play();</div><div class="line">			printBoard();</div><div class="line">			if (player == isWin()) &#123;</div><div class="line">				printf(&quot;您获胜了！！&quot;);</div><div class="line">				break;</div><div class="line">			&#125;</div><div class="line">			step++;</div><div class="line">			currentDepth--;</div><div class="line">			player = (player == COM) ? MAN : COM;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	getch();</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;项目说明&quot;&gt;&lt;a href=&quot;#项目说明&quot; class=&quot;headerlink&quot; title=&quot;项目说明&quot;&gt;&lt;/a&gt;项目说明&lt;/h3&gt;&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;在玩家之间玩井字棋，基本上只会出现平局的结果，那么如何让计算机也能模拟
    
    </summary>
    
      <category term="计算机博弈" scheme="http://tusko.cn/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8D%9A%E5%BC%88/"/>
    
    
      <category term="计算机博弈" scheme="http://tusko.cn/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8D%9A%E5%BC%88/"/>
    
      <category term="计算机博弈算法" scheme="http://tusko.cn/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8D%9A%E5%BC%88%E7%AE%97%E6%B3%95/"/>
    
      <category term="编程" scheme="http://tusko.cn/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>基于经验的井字棋</title>
    <link href="http://tusko.cn/2015/08/17/%E5%9F%BA%E4%BA%8E%E7%BB%8F%E9%AA%8C%E7%9A%84%E4%BA%95%E5%AD%97%E6%A3%8B/"/>
    <id>http://tusko.cn/2015/08/17/基于经验的井字棋/</id>
    <published>2015-08-17T03:11:11.000Z</published>
    <updated>2017-08-06T08:06:24.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="井字棋介绍"><a href="#井字棋介绍" class="headerlink" title="井字棋介绍"></a>井字棋介绍</h3><p>&#160; &#160; &#160; &#160;井字棋，英文名叫Tic-Tac-Toe，是一种在3*3格子上进行的连珠游戏，和五子棋类似，由于棋盘一般不画边框，格线排成井字故得名。游戏需要的工具仅为纸和笔，然后由分别代表O和X的两个游戏者轮流在格子里留下标记（一般来说先手者为X）<br><img src="/images/井字棋.jpg" alt="井字棋"></p>
<h3 id="项目说明"><a href="#项目说明" class="headerlink" title="项目说明"></a>项目说明</h3><p>这是本人做的第一个关于计算机博弈的程序，用C语言实现了人机对弈，电脑走步是参考<a href="http://www.guokr.com/article/4754/" target="_blank" rel="external">这篇文章</a>，使用纯经验-占角策略，玩家最多与电脑平局，达到了预期效果</p>
<h3 id="电脑策略"><a href="#电脑策略" class="headerlink" title="电脑策略"></a>电脑策略</h3><p>本节引用自<a href="http://www.guokr.com/article/4754/" target="_blank" rel="external">http://www.guokr.com/article/4754/</a>，如有侵权，请联系我</p>
<h4 id="先手先占角"><a href="#先手先占角" class="headerlink" title="先手先占角"></a>先手先占角</h4><p>游戏开始后，先占上一个角（比如左下角吧），那么对方总共有五种本质不同的应对策略：占据靠近你的那条边，占据靠近你的那个角，占据远离你的那条边，占据远离你的那个角（即对角），以及占据正中央的位置。不可思议的是，在这五种策略中，前面四种都是陷阱——如果对方不慎选择了前面四种策略中的任意一种，他就必然输掉。</p>
<p><img src="/images/井字棋1.png" alt="Alt text"></p>
<p>上图显示了在这四种情况下你可以如何把对方一步步逼上绝路。假设对方走正下方，占据了一个靠近你的边（最左边的那个图），你就可以占据正中央来应对，逼迫对方不得不走右上角。这时，只需要在左上角放下一子，你就赢定了——图中出现了两条只差一子的连线，对方不可能兼顾得了。</p>
<p>右边几个图显示了对方第一步棋的其它几种走法。选择合适的位置应对他，都可以在下一步迫使对方只剩一种走法，接下来你便可以下出“一箭双雕”的棋，让对方无法彻底封杀你。</p>
<p>也就是说，当你占据棋盘一角后，在对方下一步棋的八个可选位置中，其中七个位置都是必输的，陷阱摆满了几乎整个棋盘。</p>
<p><img src="/images/井字棋2.png" alt="Alt text"></p>
<p>上图显示了在这四种情况下你可以如何把对方一步步逼上绝路。假设对方走正下方，占据了一个靠近你的边（最左边的那个图），你就可以占据正中央来应对，逼迫对方不得不走右上角。这时，只需要在左上角放下一子，你就赢定了——图中出现了两条只差一子的连线，对方不可能兼顾得了。</p>
<p>右边几个图显示了对方第一步棋的其它几种走法。选择合适的位置应对他，都可以在下一步迫使对方只剩一种走法，接下来你便可以下出“一箭双雕”的棋，让对方无法彻底封杀你。</p>
<p>也就是说，当你占据棋盘一角后，在对方下一步棋的八个可选位置中，其中七个位置都是必输的，陷阱摆满了几乎整个棋盘。在面对“先走一角”的诡异开局时，你的朋友说不准就会慌了手脚，没能冷静地占住中间，决定了必败的命运。</p>
<h4 id="后手还是先占角"><a href="#后手还是先占角" class="headerlink" title="后手还是先占角"></a>后手还是先占角</h4><p><img src="/images/井字棋3.png" alt="Alt text"></p>
<p>作为后行者，你遇到的往往是“先走中间”的经典开局。此时，千万别忘了，先占角仍然是一条金科玉律。如果你不慎走了某条边的位置，对方可就赢定了！对方可以向上面的第一幅图那样，在正右方下子应对，逼迫你把下一步棋落在正左方。此时，对方便可占据右上方的位置，同时产生出两条仅差一子的连线。右边三幅图则显示，如果你在角上应对，最终总会是一盘和棋。</p>
<h3 id="程序实现"><a href="#程序实现" class="headerlink" title="程序实现"></a>程序实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div><div class="line">435</div><div class="line">436</div><div class="line">437</div><div class="line">438</div><div class="line">439</div><div class="line">440</div><div class="line">441</div><div class="line">442</div><div class="line">443</div><div class="line">444</div><div class="line">445</div><div class="line">446</div><div class="line">447</div><div class="line">448</div><div class="line">449</div><div class="line">450</div><div class="line">451</div><div class="line">452</div><div class="line">453</div><div class="line">454</div><div class="line">455</div><div class="line">456</div><div class="line">457</div><div class="line">458</div><div class="line">459</div><div class="line">460</div><div class="line">461</div></pre></td><td class="code"><pre><div class="line">#include &lt;stdio.h&gt;</div><div class="line">#include &quot;stdlib.h&quot;</div><div class="line">#include &quot;time.h&quot;</div><div class="line">#include&lt;ctype.h&gt;      </div><div class="line">#include&lt;conio.h&gt; </div><div class="line">#define MAN 1 </div><div class="line">#define COM -1</div><div class="line">#define MAN_WIN 100</div><div class="line">#define COM_WIN -100</div><div class="line">#define DRAW 0 //平局 </div><div class="line">#define NONE 0  </div><div class="line">#define POSITION 9</div><div class="line">#define STEP 9</div><div class="line">#define random(x) (rand()%(x)) //产生随机数</div><div class="line"></div><div class="line">int board[10];//棋盘 初始默认值为0</div><div class="line">int win_place_sum;</div><div class="line">int angle[4] = &#123; 1,3,7,9 &#125;;</div><div class="line">int edge[4] = &#123; 2,4,6,8 &#125;;</div><div class="line"></div><div class="line">//是否赢了 </div><div class="line">int isWin(int player)</div><div class="line">&#123;</div><div class="line">if (board[1] == player &amp;&amp; board[1] == board[2] &amp;&amp; board[2] == board[3]) return(player);</div><div class="line">if (board[4] == player &amp;&amp; board[4] == board[5] &amp;&amp; board[5] == board[6]) return(player);</div><div class="line">if (board[7] == player &amp;&amp; board[7] == board[8] &amp;&amp; board[8] == board[9]) return(player);</div><div class="line">if (board[1] == player &amp;&amp; board[1] == board[4] &amp;&amp; board[4] == board[7]) return(player);</div><div class="line">if (board[2] == player &amp;&amp; board[2] == board[5] &amp;&amp; board[5] == board[8]) return(player);</div><div class="line">if (board[3] == player &amp;&amp; board[3] == board[6] &amp;&amp; board[6] == board[9]) return(player);</div><div class="line">if (board[1] == player &amp;&amp; board[1] == board[5] &amp;&amp; board[5] == board[9]) return(player);</div><div class="line">if (board[3] == player &amp;&amp; board[3] == board[5] &amp;&amp; board[5] == board[7]) return(player);</div><div class="line">//没人赢返回0</div><div class="line">return NONE;</div><div class="line">&#125;</div><div class="line">int isAngle(int position)</div><div class="line">&#123;</div><div class="line">if (position == 1 || position == 3 || position == 7 || position == 9)</div><div class="line">return position;</div><div class="line">return 0;</div><div class="line">&#125;</div><div class="line"></div><div class="line">int isEdge(int position)</div><div class="line">&#123;</div><div class="line">if (position == 2 || position == 4 || position == 6 || position == 8)</div><div class="line">return position;</div><div class="line">return 0;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//两子成线，返回一个必须要下的位置 </div><div class="line">int checkWinning(int player) &#123;</div><div class="line">int i;</div><div class="line">int win_place = 10;</div><div class="line">win_place_sum = 0;</div><div class="line"></div><div class="line"></div><div class="line">for (i = 1; i &lt; 10; i++) &#123;</div><div class="line">if (board[i] == NONE) &#123;</div><div class="line">board[i] = player; //先假设该处有子进行判断 </div><div class="line">if (isWin(player) == player) &#123;</div><div class="line">board[i] = 0;</div><div class="line">win_place = i;</div><div class="line">win_place_sum++;</div><div class="line">&#125;</div><div class="line">board[i] = 0;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">return win_place;//返回下棋的位置</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">//电脑哥们进行下棋</div><div class="line">int com_play(int step , int lastPosition)</div><div class="line">&#123;</div><div class="line">int i;</div><div class="line"></div><div class="line">//随机数</div><div class="line">int ranNumber; </div><div class="line"></div><div class="line"></div><div class="line">//设置随机数种子</div><div class="line">srand((unsigned int)time(NULL));</div><div class="line"></div><div class="line"></div><div class="line">//第一步电脑走的位置</div><div class="line">int lastComPosition = 0;</div><div class="line"></div><div class="line"></div><div class="line">//能赢的地方</div><div class="line">int win_place = 10;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">int max_win_times = 0;</div><div class="line">//如果第一步，那么电脑先占角</div><div class="line">if ( ( step == 1 ) &amp;&amp; (lastPosition == 0 )) &#123;</div><div class="line">ranNumber = random(4);</div><div class="line">board[angle[ranNumber]] = COM;</div><div class="line">return angle[ranNumber];</div><div class="line">&#125;</div><div class="line">else if (step == 3)</div><div class="line">&#123;</div><div class="line"></div><div class="line">//第二步玩家走角</div><div class="line">if (isAngle(lastPosition) &gt; 0)</div><div class="line">&#123;</div><div class="line">for (i = 0; i &lt; 4; i++)</div><div class="line">&#123;</div><div class="line">if (board[angle[i]] == COM)</div><div class="line">&#123;</div><div class="line">lastComPosition = angle[i];</div><div class="line">// printf(&quot;第一步电脑走的是%d&quot;, lastComPosition);</div><div class="line">break; </div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">//如果走的是靠近边的角,就占对角</div><div class="line">if ((lastPosition + lastComPosition) != 10)</div><div class="line">&#123;</div><div class="line">if (board[10 - lastComPosition] == NONE)</div><div class="line">&#123;</div><div class="line">board[10 - lastComPosition] = COM;</div><div class="line">return 10 - lastComPosition;</div><div class="line">&#125;</div><div class="line">else</div><div class="line">&#123;</div><div class="line">printf(&quot;出错了——1&quot;);</div><div class="line">return 0;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">//如果走的是对角,那么就占其他的角</div><div class="line">else</div><div class="line">&#123;</div><div class="line">while (true)</div><div class="line">&#123;</div><div class="line">ranNumber = random(4);</div><div class="line">if (board[angle[ranNumber]] == NONE)</div><div class="line">&#123;</div><div class="line">board[angle[ranNumber]] = COM;</div><div class="line">return angle[ranNumber];</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">//第二步玩家走的是边</div><div class="line">else if( isEdge(lastPosition) &gt; 0 ) </div><div class="line">&#123;</div><div class="line">if(board[5] == NONE)</div><div class="line">&#123;</div><div class="line">board[5] = COM;</div><div class="line">return 5; </div><div class="line">&#125;</div><div class="line">else</div><div class="line">&#123;</div><div class="line">printf(&quot;中间5被占用了 ...&quot;);</div><div class="line">return 0; </div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div><div class="line">//如果走的是正中间 ，那么电脑走对角</div><div class="line">else if(lastPosition == 5 )</div><div class="line">&#123;</div><div class="line">for (i = 0; i &lt; 4; i++)</div><div class="line">&#123;</div><div class="line">if (board[angle[i]] == COM)</div><div class="line">&#123;</div><div class="line">lastComPosition = angle[i];</div><div class="line">// printf(&quot;第一步电脑走的是%d&quot;, lastComPosition);</div><div class="line">break;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">if (board[10 - lastComPosition] == NONE)</div><div class="line">&#123;</div><div class="line">board[10 - lastComPosition] = COM;</div><div class="line">return 10 - lastComPosition;</div><div class="line">&#125;</div><div class="line">else</div><div class="line">&#123;</div><div class="line">printf(&quot;出错了——2&quot;);</div><div class="line">return 0;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">else if (step == 5)</div><div class="line">&#123;</div><div class="line">win_place = checkWinning(COM);//电脑两子成线</div><div class="line">if (win_place &lt; 10)</div><div class="line">&#123;</div><div class="line">board[win_place] = COM;</div><div class="line">return win_place;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">win_place = checkWinning(MAN); //玩家的棋两子成线</div><div class="line">if (win_place &lt; 10)</div><div class="line">&#123;</div><div class="line">board[win_place] = COM;</div><div class="line">return win_place;</div><div class="line">&#125;</div><div class="line">//如果没有能赢的地方,则占角</div><div class="line">else</div><div class="line">&#123;</div><div class="line">for (i = 0; i &lt; 4; i++)</div><div class="line">&#123;</div><div class="line">if (board[angle[i]] == NONE)</div><div class="line">&#123;</div><div class="line">board[angle[i]] = COM;</div><div class="line"></div><div class="line">if (checkWinning(COM) &lt; 10 &amp;&amp; max_win_times &lt; win_place_sum)</div><div class="line">&#123;</div><div class="line">max_win_times = win_place_sum; //能赢的次数</div><div class="line">win_place = angle[i];</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">board[angle[i]] = NONE;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">board[win_place] = COM;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div><div class="line">else if(step == 2 )</div><div class="line">&#123;</div><div class="line">if (board[5] == NONE)</div><div class="line">&#123;</div><div class="line">board[5] = COM;</div><div class="line">return 5;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">else</div><div class="line">while (true)</div><div class="line">&#123;</div><div class="line">ranNumber = random(4);</div><div class="line">if (board[angle[ranNumber]] == NONE )</div><div class="line">&#123;</div><div class="line">board[angle[ranNumber]] = COM;</div><div class="line">return angle[ranNumber];</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">else</div><div class="line">&#123;</div><div class="line">win_place = checkWinning(COM);//电脑两子成线</div><div class="line">if (win_place &lt; 10)</div><div class="line">&#123;</div><div class="line">board[win_place] = COM;</div><div class="line">return win_place;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">win_place = checkWinning(MAN); //玩家的棋两子成线</div><div class="line">if (win_place &lt; 10)</div><div class="line">&#123;</div><div class="line">board[win_place] = COM;</div><div class="line">return win_place;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">for (i = 1; i &lt;= 9; i++) &#123;</div><div class="line">if (board[i] == NONE)</div><div class="line">&#123;</div><div class="line">board[i] = COM;</div><div class="line">printf(&quot;最后一步？？&quot;);</div><div class="line">return i;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div><div class="line">printf(&quot;COM-error&quot;);</div><div class="line">return 10;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">//玩家进行下棋</div><div class="line">int person_play()</div><div class="line">&#123;</div><div class="line">int row;</div><div class="line">int col;</div><div class="line">int index;</div><div class="line"></div><div class="line"></div><div class="line">do</div><div class="line">&#123;</div><div class="line">printf(&quot;亲~轮到你走一步了!!!请输入行坐标和列坐标 如  1 1 为左上角第一个点  2 2 为正中间的点   （1和1之间有个空格，否则错误）&quot;);</div><div class="line">scanf(&quot;%d&quot;, &amp;row);</div><div class="line">scanf(&quot;%d&quot;, &amp;col);</div><div class="line">index = (row - 1) * 3 + col;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">if (board[index] == NONE)</div><div class="line">&#123;</div><div class="line">board[index] = MAN;</div><div class="line">return index;</div><div class="line">&#125;</div><div class="line">printf(&quot;输入的下标不合法 ，越界或者此处已经有棋子存在 !!!! 请重新输入下标 ：）&quot;);</div><div class="line"></div><div class="line"></div><div class="line">&#125; while (true);</div><div class="line"></div><div class="line"></div><div class="line">printf(&quot;MAN-error&quot;);</div><div class="line">return 10;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">//画棋盘</div><div class="line">void display()</div><div class="line">&#123;</div><div class="line">char board_dis[10] = &#123; &quot;&quot; &#125;;</div><div class="line">int i;</div><div class="line">for (i = 1; i &lt; 10; i++)</div><div class="line">&#123;</div><div class="line">if (board[i] == COM) &#123;</div><div class="line">board_dis[i] = &apos;X&apos;;</div><div class="line">&#125;</div><div class="line">if (board[i] == MAN) &#123;</div><div class="line">board_dis[i] = &apos;O&apos;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div><div class="line">for (i = 0; i &lt; 10; i++) &#123;</div><div class="line">printf(&quot;-&quot;);</div><div class="line">&#125;</div><div class="line">printf(&quot;\n|&quot;);</div><div class="line">for (i = 1; i &lt;= 3; i++) &#123;</div><div class="line">printf(&quot;%c |&quot;, board_dis[i]);</div><div class="line">&#125;</div><div class="line">printf(&quot;\n&quot;);</div><div class="line">for (i = 0; i &lt; 10; i++) &#123;</div><div class="line">printf(&quot;-&quot;);</div><div class="line">&#125;</div><div class="line">printf(&quot;\n|&quot;);</div><div class="line">for (i = 4; i &lt;= 6; i++) &#123;</div><div class="line">printf(&quot;%c |&quot;, board_dis[i]);</div><div class="line">&#125;</div><div class="line">printf(&quot;\n&quot;);</div><div class="line">for (i = 0; i &lt; 10; i++) &#123;</div><div class="line">printf(&quot;-&quot;);</div><div class="line">&#125;</div><div class="line">printf(&quot;\n|&quot;);</div><div class="line">for (i = 7; i &lt;= 9; i++) &#123;</div><div class="line">printf(&quot;%c |&quot;, board_dis[i]);</div><div class="line">&#125;</div><div class="line">printf(&quot;\n&quot;);</div><div class="line">for (i = 0; i &lt; 10; i++) &#123;</div><div class="line">printf(&quot;-&quot;);</div><div class="line">&#125;</div><div class="line">printf(&quot;\n&quot;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">void main()</div><div class="line">&#123;</div><div class="line">char c;</div><div class="line">int i;</div><div class="line">int step = 1; </div><div class="line">int lastPosition = 0;</div><div class="line"></div><div class="line"></div><div class="line">for (i = 0; i&lt;30; i++)</div><div class="line">printf(&quot;*&quot;);</div><div class="line">printf(&quot;\n*hello,welcome to this game!!*\n&quot;);</div><div class="line">for (i = 0; i&lt;30; i++)</div><div class="line">printf(&quot;*&quot;);</div><div class="line">printf(&quot;\nDo you want to play first? y -你先走  , n-电脑先走&quot;);</div><div class="line">for (c = getche(); c != &apos;Y&apos;&amp;&amp;c != &apos;y&apos;&amp;&amp;c != &apos;N&apos;&amp;&amp;c != &apos;n&apos;; c = getche());</div><div class="line">if (c == &apos;Y&apos; || c == &apos;y&apos;) </div><div class="line">&#123; </div><div class="line">display();</div><div class="line">for (step = 1; step &lt;= STEP; )</div><div class="line">&#123;</div><div class="line">lastPosition = person_play();</div><div class="line">display();</div><div class="line">if (MAN == isWin(MAN))</div><div class="line">&#123;</div><div class="line">printf(&quot;恭喜您 ， 您获胜了 &quot;);</div><div class="line">break;</div><div class="line">&#125;</div><div class="line">step++;</div><div class="line">if (step == 10) &#123;</div><div class="line">break;</div><div class="line">&#125;</div><div class="line">lastPosition = com_play(step,lastPosition);</div><div class="line">display();</div><div class="line"></div><div class="line"></div><div class="line">if (COM == isWin(COM))</div><div class="line">&#123;</div><div class="line">printf(&quot;很遗憾 ，电脑获胜了 &quot;);</div><div class="line">break;</div><div class="line">&#125;</div><div class="line">step++;</div><div class="line">&#125;</div><div class="line">if (isWin(COM) == NONE &amp;&amp; isWin(MAN) == NONE &amp;&amp; step == 10)</div><div class="line">&#123;</div><div class="line">printf(&quot;平局&quot;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">else if (c == &apos;N&apos; || c == &apos;n&apos;)</div><div class="line">&#123;</div><div class="line">for (step = 1; step &lt;= STEP; )</div><div class="line">&#123;</div><div class="line"></div><div class="line"></div><div class="line">lastPosition = com_play(step, lastPosition);</div><div class="line">display();</div><div class="line"></div><div class="line"></div><div class="line">if (COM == isWin(COM))</div><div class="line">&#123;</div><div class="line">printf(&quot;很遗憾 ，电脑获胜了 &quot;);</div><div class="line">break;</div><div class="line">&#125;</div><div class="line">step++;</div><div class="line"></div><div class="line"></div><div class="line">if (step == 10) &#123;</div><div class="line">break;</div><div class="line">&#125;</div><div class="line">lastPosition = person_play();</div><div class="line"></div><div class="line">if (MAN == isWin(MAN))</div><div class="line">&#123;</div><div class="line">printf(&quot;恭喜您 ， 您获胜了 &quot;);</div><div class="line">break;</div><div class="line">&#125;</div><div class="line">step++;</div><div class="line"></div><div class="line">&#125;</div><div class="line">if (isWin(COM) == NONE &amp;&amp; isWin(MAN) == NONE &amp;&amp; step == 10)</div><div class="line">&#123;</div><div class="line">printf(&quot;平局&quot;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">getch();</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;井字棋介绍&quot;&gt;&lt;a href=&quot;#井字棋介绍&quot; class=&quot;headerlink&quot; title=&quot;井字棋介绍&quot;&gt;&lt;/a&gt;井字棋介绍&lt;/h3&gt;&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;井字棋，英文名叫Tic-Tac-Toe，是一种在3*3格子上进
    
    </summary>
    
      <category term="计算机博弈" scheme="http://tusko.cn/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8D%9A%E5%BC%88/"/>
    
    
      <category term="计算机博弈" scheme="http://tusko.cn/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8D%9A%E5%BC%88/"/>
    
  </entry>
  
</feed>
