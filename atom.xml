<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Killua&#39;s blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://tusko.cn/"/>
  <updated>2017-08-27T16:22:07.646Z</updated>
  <id>http://tusko.cn/</id>
  
  <author>
    <name>Killua</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>转载：游戏服务端架构发展史(上)</title>
    <link href="http://tusko.cn/2016/10/10/%E6%B8%B8%E6%88%8F%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%9E%B6%E6%9E%84%E5%8F%91%E5%B1%95%E5%8F%B2-%E4%B8%8A/"/>
    <id>http://tusko.cn/2016/10/10/游戏服务端架构发展史-上/</id>
    <published>2016-10-10T07:16:00.000Z</published>
    <updated>2017-08-27T16:22:07.646Z</updated>
    
    <content type="html"><![CDATA[<h3 id="游戏服务端架构发展史（上）"><a href="#游戏服务端架构发展史（上）" class="headerlink" title="游戏服务端架构发展史（上）"></a>游戏服务端架构发展史（上）</h3><p>《游戏服务端架构发展史》转载请著名出处：<a href="http://www.skywind.me/blog/archives/1265" target="_blank" rel="external">http://www.skywind.me/blog/archives/1265</a></p>
<h4 id="类型1：卡牌，跑酷等弱交互服务端"><a href="#类型1：卡牌，跑酷等弱交互服务端" class="headerlink" title="类型1：卡牌，跑酷等弱交互服务端"></a>类型1：卡牌，跑酷等弱交互服务端</h4><p>卡牌跑酷类因为交互弱，玩家和玩家之间不需要实时面对面PK，打一下对方的离线数据，计算下排行榜，买卖下道具即可，所以实现往往使用简单的 HTTP服务器：</p>
<p><img src="/image_save/弱交互型服务端.png" alt="弱交互型服务端"></p>
<p>登录时可以使用非对称加密（RSA, DH），服务器根据客户端uid，当前时间戳还有服务端私钥，计算哈希得到的加密 key 并发送给客户端。之后双方都用 HTTP通信，并用那个key进行RC4加密。客户端收到key和时间戳后保存在内存，用于之后通信，服务端不需要保存 key，因为每次都可以根据客户端传上来的 uid 和 时间戳 以及服务端自己的私钥计算得到。用模仿 TLS的行为，来保证多次 HTTP请求间的客户端身份，并通过时间戳保证同一人两次登录密钥不同。</p>
<p>每局开始时，访问一下，请求一下关卡数据，玩完了又提交一下，验算一下是否合法，获得什么奖励，数据库用单台 MySQL或者 MongoDB即可，后端的 Redis做缓存（可选）。如果要实现通知，那么让客户端定时15秒轮询一下服务器，如果有消息就取下来，如果没消息可以逐步放长轮询时间，比如30秒；如果有消息，就缩短轮询时间到10秒，5秒，即便两人聊天，延迟也能自适应。</p>
<p>此类服务器用来实现一款三国类策略或者卡牌及酷跑的游戏已经绰绰有余，这类游戏因为逻辑简单，玩家之间交互不强，使用 HTTP来开发的话，开发速度快，调试只需要一个浏览器就可以把逻辑调试清楚了。</p>
<h4 id="类型2：第一代游戏服务器-1978"><a href="#类型2：第一代游戏服务器-1978" class="headerlink" title="类型2：第一代游戏服务器 1978"></a>类型2：第一代游戏服务器 1978</h4><p>978年，英国著名的财经学校University of Essex的学生 Roy Trubshaw编写了世界上第一个MUD程序《MUD1》，在University of Essex于1980年接入 ARPANET之后加入了不少外部的玩家，甚至包括国外的玩家。《MUD1》程序的源代码在 ARPANET共享之后出现了众多的改编版本，至此MUD才在全世界广泛流行起来。不断完善的 MUD1的基础上产生了开源的 MudOS（1991），成为众多网游的鼻祖：</p>
<p><img src="/image_save/MUDOS1978.png" alt="MUDOS1978"></p>
<p>MUDOS采用 C语言开发，因为玩家和玩家之间有比较强的交互（聊天，交易，PK），MUDOS使用单线程无阻塞套接字来服务所有玩家，所有玩家的请求都发到同一个线程去处理，主线程每隔1秒钟更新一次所有对象（网络收发，更新对象状态机，处理超时，刷新地图，刷新NPC）。</p>
<p>游戏世界采用房间的形式组织起来，每个房间有东南西北四个方向可以移动到下一个房间，由于欧美最早的网游都是地牢迷宫形式的，因此场景的基本单位被成为 “房间”。MUDOS使用一门称为LPC的脚本语言来描述整个世界（包括房间拓扑，配置，NPC，以及各种剧情）。游戏里面的高级玩家（巫师），可以不断的通过修改脚本来为游戏添加房间以及增加剧情。早年 MUD1上线时只有17个房间，Roy Trubshaw毕业以后交给他的师弟 Richard Battle，在 Richard Battle手上，不断的添加各种玩法到一百多个房间，终于让 MUD发扬光大。</p>
<p>用户使用 Telnet之类的客户端用 Tcp协议连接到 MUDOS上，使用纯文字进行游戏，每条指令用回车进行分割。比如 1995年国内第一款 MUD游戏《侠客行》，你敲入：”go east”，游戏就会提示你：“后花园 – 这里是归云庄的后花园，种满了花草，几个庄丁正在浇花。此地乃是含羞草生长之地。这里唯一的出口是 north。这里有：花待 阿牧（A mu），还有二位庄丁（Zhuang Ding）”，然后你继续用文字操作，查看阿牧的信息：“look a mu”，系统提示：“花待 阿牧（A mu）他是陆乘风的弟子，受命在此看管含羞草。他看起来三十多岁，生得眉清目秀，端正大方，一表人才。他的武艺看上去【不是很高】，出手似乎【极轻】”。然后你可以选择击败他获得含羞草，但是你吃了含羞草却又可能会中毒死亡。在早期网上资源贫乏的时候，这样的游戏有很强的代入感。</p>
<p>用户数据保存在文件中，每个用户登录时，从文本文件里把用户的数据全部加载进来，操作全部在内存里面进行，无需马上刷回磁盘。用户退出了，或者每隔5分钟检查到数据改动了，都会保存会磁盘。这样的系统在当时每台服务器承载个4000人同时游戏，不是特别大的问题。从1991年的 MUDOS发布后，全球各地都在为他改进，扩充，退出新版本，随着 Windows图形机能的增强。1997游戏《UO》在 MUDOS的基础上为角色增加的x,y坐标，为每个房间增加了地图，并且为每个角色增加了动画，形成了第一代的图形网络游戏。</p>
<p>因为游戏内容基本可以通过 LPC脚本进行定制，所以MUDOS也成为名副其实的第一款服务端引擎，引擎一次性开发出来，然后制作不同游戏内容。后续国内的《万王之王》等游戏，很多都是跟《UO》一样，直接在 MUDOS上进行二次开发，加入房间的地图还有角色的坐标等要素，该架构一直为国内的第一代 MMORPG提供了稳固的支持，直到 2003年，还有游戏基于 MUDOS开发。</p>
<p>虽然后面图形化增加了很多东西，但是这些MMORPG后端的本质还是 MUDOS。随着游戏内容的越来越复杂，架构变得越来越吃不消了，各种负载问题慢慢浮上水面，于是有了我们的第二代游戏服务器。</p>
<h4 id="类型3：第二代游戏服务器-2003"><a href="#类型3：第二代游戏服务器-2003" class="headerlink" title="类型3：第二代游戏服务器 2003"></a>类型3：第二代游戏服务器 2003</h4><p>2000年后，网游已经脱离最初的文字MUD，进入全面图形化年代。最先承受不住的其实是很多小文件，用户上下线，频繁的读取写入用户数据，导致负载越来越大。随着在线人数的增加和游戏数据的增加，服务器变得不抗重负。同时早期 EXT磁盘分区比较脆弱，稍微停电，容易发生大面积数据丢失。因此第一步就是拆分文件存储到数据库去：</p>
<p><img src="/image_save/第二代游戏服务端初型.png" alt="第二代游戏服务端初型"></p>
<p>此时游戏服务端已经脱离陈旧的 MUDOS体系，各个公司在参考 MUDOS结构的情况下，开始自己用 C在重新开发自己的游戏服务端。并且脚本也抛弃了 LPC，采用扩展性更好的 Python或者 Lua来代替。由于主逻辑使用单线程模型，随着游戏内容的增加，传统单服务器的结构进一步成为瓶颈。于是有人开始拆分游戏世界，变为下面的模型：</p>
<p><img src="/image_save/第二代游戏服务端二型.png" alt="第二代游戏服务端二型"></p>
<p>游戏服务器压力拆分后得意缓解，但是两台游戏服务器同时访问数据库，大量重复访问，大量数据交换，使得数据库成为下一个瓶颈。于是形成了数据库前端代理（DB Proxy），游戏服务器不直接访问数据库而是访问代理，再有代理访问数据库，同时提供内存级别的cache。早年 MySQL4之前没有提供存储过程，这个前端代理一般和 MySQL跑在同一台上，它转化游戏服务器发过来的高级数据操作指令，拆分成具体的数据库操作，一定程度上代替了存储过程：</p>
<p><img src="/image_save/第二代游戏服务端三型.png" alt="第二代游戏服务端三型"></p>
<p>但是这样的结构并没有持续太长时间，因为玩家切换场景经常要切换连接，中间的状态容易错乱。而且游戏服务器多了以后，相互之间数据交互又会变得比较麻烦，于是人们拆分了网络功能，独立出一个网关服务 Gate（有的地方叫 Session，有的地方叫 LinkSvr之类的，名字不同而已）：</p>
<p><img src="/image_save/第二代游戏服务端四型.png" alt="第二代游戏服务端四型"></p>
<p>把网络功能单独提取出来，让用户统一去连接一个网关服务器，再有网关服务器转发数据到后端游戏服务器。而游戏服务器之间数据交换也统一连接到网管进行交换。这样类型的服务器基本能稳定的为玩家提供游戏服务，一台网关服务1-2万人，后面的游戏服务器每台服务5k-1w，依游戏类型和复杂度不同而已，图中隐藏了很多不重要的服务器，如登录和管理。这是目前应用最广的一个模型，到今天任然很多新项目会才用这样的结构来搭建。</p>
<p>人都是有惯性的，按照先前的经验，似乎把 MUDOS拆分的越开性能越好。于是大家继续想，网关可以拆分呀，基础服务如聊天交易，可以拆分呀，还可以提供web接口，数据库可以拆分呀，于是有了下面的模型：</p>
<p><img src="/image_save/第二代游戏服务端五型.png" alt="第二代游戏服务端五型"></p>
<p>这样的模型好用么？确实有成功游戏使用类似这样的架构，并且发挥了它的性能优势，比如一些大型 MMORPG。但是有两个挑战：每增加一级服务器，状态机复杂度可能会翻倍，导致研发和找bug的成本上升；并且对开发组挑战比较大，一旦项目时间吃紧，开发人员经验不足，很容易弄挂。</p>
<p>比如我见过某上海一线游戏公司的一个 RPG上来就要上这样的架构，我看了下他们团队成员的经验，问了下他们的上线日期，劝他们用前面稍微简单一点的模型。人家自信得很，认为有成功项目是这么做的，他们也要这么做，自己很想实现一套。于是他们义无反顾的开始编码，项目做了一年多，然后，就没有然后了。</p>
<p>现今在游戏成功率不高的情况下，一开始上一套比较复杂的架构需要考虑投资回报率，比如你的游戏上线半年内 PCU会去到多少？如果一个 APRG游戏，每组服务器5千人都到不了的话，那么选择一套更为贴近实际情况的结构更为经济。即使后面你的项目真的超过5千人朝着1万人目标奔的话，相信那个时候你的项目已经挣大钱了 ，你数着钱加着班去逐步迭代，一次次拆分它，相信心里也是乐开花的。</p>
<p>上面这些类型基本都是从拆分 MUDOS开始，将 MUDOS中的各个部件从单机一步步拆成分布式。虽然今天任然很多新项目在用上面某一种类似的结构。因为他们本质上都是对 MUDOS的分解，故将他们归纳为第二代游戏服务器。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;游戏服务端架构发展史（上）&quot;&gt;&lt;a href=&quot;#游戏服务端架构发展史（上）&quot; class=&quot;headerlink&quot; title=&quot;游戏服务端架构发展史（上）&quot;&gt;&lt;/a&gt;游戏服务端架构发展史（上）&lt;/h3&gt;&lt;p&gt;《游戏服务端架构发展史》转载请著名出处：&lt;a hre
    
    </summary>
    
      <category term="游戏" scheme="http://tusko.cn/categories/%E6%B8%B8%E6%88%8F/"/>
    
    
      <category term="游戏" scheme="http://tusko.cn/tags/%E6%B8%B8%E6%88%8F/"/>
    
      <category term="转载" scheme="http://tusko.cn/tags/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="服务器" scheme="http://tusko.cn/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>游戏类型小记</title>
    <link href="http://tusko.cn/2016/10/10/%E6%B8%B8%E6%88%8F%E7%B1%BB%E5%9E%8B%E5%B0%8F%E8%AE%B0/"/>
    <id>http://tusko.cn/2016/10/10/游戏类型小记/</id>
    <published>2016-10-10T07:16:00.000Z</published>
    <updated>2017-08-27T16:16:54.393Z</updated>
    
    <content type="html"><![CDATA[<h4 id="RPG-Role-playing-Game∶角色扮演游戏"><a href="#RPG-Role-playing-Game∶角色扮演游戏" class="headerlink" title="RPG = Role-playing Game∶角色扮演游戏"></a>RPG = Role-playing Game∶角色扮演游戏</h4><p>&#160; &#160; &#160; &#160;由玩家扮演游戏中的一个或数个角色，有完整的故事情节的游戏。玩家可能会与冒险类游戏混淆，其实区分很简单，RPG游戏更强调的是剧情发展和个人体验，一般来说，RPG可分为日式和美式两种，主要区别在于文化背景和战斗方式。日式RPG多采用回合制或半即时制战斗，如《最终幻想》系列，大多国产中文RPG也可归为日式RPG之列，如大家熟悉的《仙剑》、《剑侠》等；美式RPG如《暗黑破坏神》系列。更详细的，可以根据战斗进行方式分类，将RPG分为动作角色扮演游戏（A.RPG，战斗方式为即时动作，典型就是《暗黑破坏神》）和战略角色扮演游戏 （S.RPG，战斗方式好象下棋，即我们常说的战棋类游戏，如《轩辕伏魔录》。</p>
<h4 id="ACT-Action-Game∶动作游戏"><a href="#ACT-Action-Game∶动作游戏" class="headerlink" title="ACT = Action Game∶动作游戏"></a>ACT = Action Game∶动作游戏</h4><p>&#160; &#160; &#160; &#160;玩家控制游戏人物用各种武器消灭敌人以过关的游戏，不追求故事情节，如熟悉的《超级玛里》、可爱的《星之卡比》、华丽的《波斯王子》等等。电脑上的动作游戏大多脱胎于早期的街机游戏和动作游戏如《魂斗罗》、《三国志》等，设计主旨是面向普通玩家，以纯粹的娱乐休闲为目的，一般有少部分简单的解谜成份，操作简单，易于上手，紧张刺激，属于”大众化”游戏。 </p>
<h4 id="AVG-Adventure-Game-∶冒险游戏"><a href="#AVG-Adventure-Game-∶冒险游戏" class="headerlink" title="AVG = Adventure Game ∶冒险游戏"></a>AVG = Adventure Game ∶冒险游戏</h4><p>&#160; &#160; &#160; &#160;由玩家控制游戏人物进行虚拟冒险的游戏。与RPG不同的是，AVG的特色是故事情节往往是以完成一个任务或解开某些迷题的形式出现的，而且在游戏过程中刻意强调谜题的重要性。AVG也可再细分为动作类和解迷类两种，动作类AVG可以包含一些格斗或射击成分如《生化危机》系列、《古墓丽影》系列、《恐龙危机》等；而解迷类AVG则纯粹依靠解谜拉动剧情的发展，难度系数较大，代表是超经典的《神秘岛》系列。 </p>
<h4 id="SLG-Strategy-Game∶策略游戏"><a href="#SLG-Strategy-Game∶策略游戏" class="headerlink" title="SLG = Strategy Game∶策略游戏"></a>SLG = Strategy Game∶策略游戏</h4><p>&#160; &#160; &#160; &#160;玩家运用策略与电脑或其它玩家较量，以取得各种形式胜利的游戏，或统一全国，或开拓外星殖民地。策略游戏可分为回合制和即时制两种，回合制策略游戏如大家喜欢的《三国志》系列、《樱花大战》系列；即时制策略游戏如《命令与征服》系列、《帝国》系列、《沙丘》等。后来有些媒体将模拟经营，即SIM（simulation）类游戏，如《模拟人生》、《模拟城市》、《过山车大亨》、《主题公园》和养成类游戏（TCG，如《世界足球经理》，《零波丽育成计划》等）也归到了SLG下。 </p>
<h4 id="RTS-Real-Time-Strategy-Game：即时战略游戏"><a href="#RTS-Real-Time-Strategy-Game：即时战略游戏" class="headerlink" title="RTS = Real-Time Strategy Game：即时战略游戏"></a>RTS = Real-Time Strategy Game：即时战略游戏</h4><p>&#160; &#160; &#160; &#160;本来属于策略游戏SLG的一个分支，但由于其在世界上的迅速风靡，使之慢慢发展成了一个单独的类型，知名度甚至超过了SLG，有点象现在国际足联和国际奥委会的关系。代表作有《魔兽争霸》系列、《帝国时代》系列、《星际争霸》等等。后来，从其上又衍生出了所谓”即时战术游戏”，多以控制一个小队完成任务的方式，突出战术的作用，以《盟军敢死队》为代表。 </p>
<h4 id="FGT-Fighting-Game∶格斗游戏"><a href="#FGT-Fighting-Game∶格斗游戏" class="headerlink" title="FGT = Fighting Game∶格斗游戏"></a>FGT = Fighting Game∶格斗游戏</h4><p>&#160; &#160; &#160; &#160;由玩家操纵各种角色与电脑或另一玩家所控制的角色进行格斗的游戏。按呈画技术可再分为2D和3D两种，2D格斗游戏有著名的《街霸》系列、《侍魂》系列、《拳皇》系列等；3D格斗游戏如《铁拳》、《高达格斗》等。此类游戏谈不上什么剧情，最多有个简单的场景设定，或背景展示，场景、人物、操控等也比较单一，但操作难度较大，主要依靠玩家迅速的判断和微操作取胜。 </p>
<h4 id="STG-SHOTING-GAME∶射击类游戏"><a href="#STG-SHOTING-GAME∶射击类游戏" class="headerlink" title="STG = SHOTING GAME∶射击类游戏"></a>STG = SHOTING GAME∶射击类游戏</h4><p>&#160; &#160; &#160; &#160;这里所说的射击类，并非是类似《VR战警》的模拟射击（枪战），而是指纯的飞机射击，由玩家控制各种飞行物(主要是飞机)完成任务或过关的游戏。此类游戏分为两种，一叫科幻飞行模拟游戏（Science-Simulation Game），非现实的，想象空间为内容，如《自由空间》、《星球大战》系列等；另一种叫真实飞行模拟游戏（Real- Simulation Game），以现实世界为基础，以真实性取胜，追求拟真，达到身临其境的感觉。如《王牌空战》系列、《苏-27》等等。另外，还有一些模拟其他的游戏也可归为STG，比如模拟潜艇的《猎杀潜航》，模拟坦克的《钢铁雄师》等。STG也可以按照视角版面分为：纵版、横版、主观视角。<br>&#160; &#160; &#160; &#160;纵版：最为常见，像街机中的《雷电》、《鲛鲛鲛》、《空牙》等，都堪称经典之作。<br>&#160; &#160; &#160; &#160;横版：横轴射击，如《沙罗曼蛇》系列、《战区88》都是这类。<br>主观视角：仿真，模拟战机就属此类。 </p>
<h4 id="FPS-First-Personal-Shooting-Game：第一人称视角射击游戏"><a href="#FPS-First-Personal-Shooting-Game：第一人称视角射击游戏" class="headerlink" title="FPS = First Personal Shooting Game：第一人称视角射击游戏"></a>FPS = First Personal Shooting Game：第一人称视角射击游戏</h4><p>&#160; &#160; &#160; &#160;严格来说它是属于动作游戏的一个分支，但和RTS一样，由于其在世界上的迅速风靡，使之展成了一个单独的类型，典型的有DOOM系列、QUAKE系列、《虚幻》、《半条命》、《CS》……不胜枚举。 </p>
<h4 id="PZL-Puzzle-Game∶益智类游戏"><a href="#PZL-Puzzle-Game∶益智类游戏" class="headerlink" title="PZL = Puzzle Game∶益智类游戏"></a>PZL = Puzzle Game∶益智类游戏</h4><p>&#160; &#160; &#160; &#160;Puzzle的原意是指以前用来培养儿童智力的拼图游戏，引申为各类有趣的益智游戏，总的来说适合休闲，最经典的嘛~就是大家耳熟能详的《俄罗斯方块》啦。 </p>
<h4 id="RCG-Racing-Game∶竞速游戏-也有称作为RAC的"><a href="#RCG-Racing-Game∶竞速游戏-也有称作为RAC的" class="headerlink" title="RCG = Racing Game∶竞速游戏 [也有称作为RAC的]"></a>RCG = Racing Game∶竞速游戏 [也有称作为RAC的]</h4><p>&#160; &#160; &#160; &#160;在电脑上模拟各类赛车运动的游戏，通常是在比赛场景下进行，非常讲究图像音效技术，往往是代表电脑游戏的尖端技术。惊险刺激，真实感强，深受车迷喜爱，代表作有《极品飞车》、《山脊赛车》、《摩托英豪》等。另一种说法称之为”Driving Game”。目前，RCG内涵越来越丰富，出现了另一些其他模式的竞速游戏，如赛艇的，赛马等。 </p>
<h4 id="SPT-Sports-Game∶体育类游戏"><a href="#SPT-Sports-Game∶体育类游戏" class="headerlink" title="SPT = Sports Game∶体育类游戏"></a>SPT = Sports Game∶体育类游戏</h4><p>&#160; &#160; &#160; &#160;在电脑上模拟各类竞技体育运动的游戏，花样繁多，模拟度高，广受欢迎，如《FIFA》系列、《NBA Live》系列、《实况足球》系列等。 </p>
<h4 id="TCG-育成游戏"><a href="#TCG-育成游戏" class="headerlink" title="TCG = 育成游戏"></a>TCG = 育成游戏</h4><p>&#160; &#160; &#160; &#160;以前GB系列泛用，现在一般大家都用 EDU（education）来指代该类游戏，以便于和“ Online Trading Card Game”区分开。<br>顾名思义，就是玩家模拟培养的游戏，如《明星志愿》、《美少女梦工厂》、《零波丽育成计划》等等。 </p>
<h4 id="CAG-Card-Game∶卡片游戏"><a href="#CAG-Card-Game∶卡片游戏" class="headerlink" title="CAG = Card Game∶卡片游戏"></a>CAG = Card Game∶卡片游戏</h4><p>&#160; &#160; &#160; &#160;玩家操纵角色通过卡片战斗模式来进行的游戏。丰富的卡片种类使得游戏富于多变化性，给玩家无限的乐趣，代表作有著名的《信长的野望》系列、《游戏王》系列，包括卡片网游《武侠Online》，从广意上说《王国之心》也可以归于此类。 </p>
<h4 id="TAB-Table-Game∶桌面游戏"><a href="#TAB-Table-Game∶桌面游戏" class="headerlink" title="TAB = Table Game∶桌面游戏"></a>TAB = Table Game∶桌面游戏</h4><p>&#160; &#160; &#160; &#160;顾名思义，是从以前的桌面游戏脱胎到电脑上的游戏，如各类强手棋（即掷骰子决定移动格数的游戏），经典的象《大富翁》系列；棋牌类游戏也属于TAB，如《拖拉机》、《红心大战》、《麻将》等等。 </p>
<h4 id="MSC-Music-Game∶音乐游戏"><a href="#MSC-Music-Game∶音乐游戏" class="headerlink" title="MSC=Music Game∶音乐游戏"></a>MSC=Music Game∶音乐游戏</h4><p>&#160; &#160; &#160; &#160;培养玩家音乐敏感性，增强音乐感知的游戏。伴随美妙的音乐，有的要求玩家翩翩起舞，有的要求玩家手指体操，例如大家都熟悉的跳舞机，就是个典型，目前的人气网游《劲乐团》也属其列。 </p>
<h4 id="LVG-Love-Game∶恋爱游戏"><a href="#LVG-Love-Game∶恋爱游戏" class="headerlink" title="LVG=Love Game∶恋爱游戏"></a>LVG=Love Game∶恋爱游戏</h4><p>&#160; &#160; &#160; &#160;玩家回到初恋的年代，回味感人的点点滴滴，模拟恋爱的游戏。恋爱不是游戏，但偏偏有恋爱游戏，目前的恋爱类游戏主要是为男性玩家服务的，也有个别女性向的。可以训练追求的技术，（和学会忍耐？）代表作有日本的《心跳回忆》系列、《思君》，国人的《青涩宝贝》、《秋忆》等。 </p>
<h4 id="ETC-etc-Game∶其他类游戏"><a href="#ETC-etc-Game∶其他类游戏" class="headerlink" title="ETC = etc. Game∶其他类游戏"></a>ETC = etc. Game∶其他类游戏</h4><p>&#160; &#160; &#160; &#160;指无法归结到已知种类中的游戏，常见于种类丰富的电视游戏，如音乐游戏、某些游戏的周边设定集（如《心跳回忆》屏保壁纸集）等，电脑游戏中较少出现，即使有也多是移植自电视游戏。其实你判定不了的就把它丢这里吧。 </p>
<h4 id="WAG-Wap-Game∶手机游戏"><a href="#WAG-Wap-Game∶手机游戏" class="headerlink" title="WAG=Wap Game∶手机游戏"></a>WAG=Wap Game∶手机游戏</h4><p>&#160; &#160; &#160; &#160;手机上的游戏。目前游戏随处可以玩，连手机也必带休闲游戏，网民最喜欢手机游戏的种类，益智类比率最高，其次依次为动作类、战略类、模拟类、射击类。列举几个手机游戏例子：《金属咆哮》、《FF7 前传》等. </p>
<h4 id="MUD-泥巴游戏"><a href="#MUD-泥巴游戏" class="headerlink" title="MUD = 泥巴游戏"></a>MUD = 泥巴游戏</h4><p>&#160; &#160; &#160; &#160;主要是依靠文字进行游戏的游戏，图形辅助。1978年，英国埃塞克斯大学的罗伊·特鲁布肖用DEC-10编写了世界上第一款MUD游戏——“MUD1”，是第一款真正意义上的实时多人交互网络游戏，这是一个纯文字的多人世界。（这可能就是MUD的命名来源吧？）其他代表作：《侠客行》、《子午线59》、《万王之王》。<br>MMORPG=Massively Multiplayer Online Role Playing Game∶大型多人在线角色扮演游戏<br>这个地球人都知道。举几个典型的例子：《网络创世纪》、《无尽的任务》、《A3》、《魔兽》、《轩辕Ⅱ》等！</p>
<h4 id="MOBA-multiplayer-online-battle-arena多人在线战斗擂台游戏"><a href="#MOBA-multiplayer-online-battle-arena多人在线战斗擂台游戏" class="headerlink" title="MOBA = multiplayer online battle arena多人在线战斗擂台游戏"></a>MOBA = multiplayer online battle arena多人在线战斗擂台游戏</h4><p>&#160; &#160; &#160; &#160;玩家被分为两队，通常每个玩家只能控制其中一队中的一名角色，以打垮对方队伍的阵地建筑为胜利条件。<br>但有些多人在线战斗竞技场游戏1个玩家可以控制2至3名角色[1][2]，或2位玩家控制1名角色[3]，例如风暴英雄中的失落的维京人、雷克萨与丘加利。</p>
<h4 id="MMO-Massively-Multiplayer-Online大型多人在线"><a href="#MMO-Massively-Multiplayer-Online大型多人在线" class="headerlink" title="MMO = Massively Multiplayer Online大型多人在线"></a>MMO = Massively Multiplayer Online大型多人在线</h4>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;RPG-Role-playing-Game∶角色扮演游戏&quot;&gt;&lt;a href=&quot;#RPG-Role-playing-Game∶角色扮演游戏&quot; class=&quot;headerlink&quot; title=&quot;RPG = Role-playing Game∶角色扮演游戏&quot;&gt;&lt;/a&gt;
    
    </summary>
    
      <category term="游戏" scheme="http://tusko.cn/categories/%E6%B8%B8%E6%88%8F/"/>
    
    
      <category term="游戏" scheme="http://tusko.cn/tags/%E6%B8%B8%E6%88%8F/"/>
    
      <category term="转载" scheme="http://tusko.cn/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>转载：游戏研发引擎对比</title>
    <link href="http://tusko.cn/2016/10/05/%E6%B8%B8%E6%88%8F%E7%A0%94%E5%8F%91%E5%BC%95%E6%93%8E%E5%AF%B9%E6%AF%94/"/>
    <id>http://tusko.cn/2016/10/05/游戏研发引擎对比/</id>
    <published>2016-10-05T06:02:00.000Z</published>
    <updated>2017-08-27T16:21:24.476Z</updated>
    
    <content type="html"><![CDATA[<h3 id="游戏研发引擎对比"><a href="#游戏研发引擎对比" class="headerlink" title="游戏研发引擎对比"></a>游戏研发引擎对比</h3><p>&#160; &#160; &#160; &#160;GameLook报道/随着手游的快速增长和游戏业的发展，选择合适的引擎已经变得越来越困难。很明显，对于开发商们来说，有着成功游戏开发历史的引擎是首选，但随着家用机与手游设备的变化，我们选择游戏研发引擎时必须从多个方面分析，以下是开发商们不可不知的10款引擎：</p>
<h4 id="Unity3D"><a href="#Unity3D" class="headerlink" title="Unity3D"></a>Unity3D</h4><p>Unity3D对于游戏开发者们来说是一个真正可以负担的起的引擎，具有其他引擎难以匹敌的用户量。更为重要的是，你只需要付费一次，而且，不管你的游戏如何成功，都不用担心Unity会分走你的收入。这对于很多开发商来说当然是非常具有吸引力对，尤其是初创公司和新入行的开发者们。以下是Unity引擎的优点和缺点：</p>
<p>优点：业内最具竞争力的授权条款；易于使用而且兼容所有游戏平台；开发者社区支持强大；学习门槛非常第；开发商使用率最高。</p>
<p>缺点：工具数量有限，所以开发商必须给自己创作工具；做复杂和多样化的效果比较耗时。</p>
<h4 id="虚幻引擎-UDK"><a href="#虚幻引擎-UDK" class="headerlink" title="虚幻引擎(UDK)"></a>虚幻引擎(UDK)</h4><p>数年以来，虚幻引擎一直是做高端EA游戏最受欢迎的引擎。《战争机器》、《蝙蝠侠：阿卡汉姆疯人院》（Batman: Arkham Asylum）、《质量效应》以及很多大作都是出自该引擎之手，以下是虚幻引擎的优点和缺点：</p>
<p>优点：开发商使用率较高，开发商社区支持支持强大，有视频教程和大量资源。最佳的引擎支持并且随时更新其他引擎平台的功能，每次更新都会增加新工具，而且管理相对容易，有些工具甚至小学生都会使用。兼容大多数平台，比如iOS、Android、Linux、Mac、Windows和大多数游戏主机。</p>
<p>缺点：授权条款只适合大作，商业授权价格为99美元，在游戏收入超过5万美元之后，必须支付25%的分成。也有一些开发者抱怨有些工具不好用，学习门槛较高。</p>
<h4 id="CryEngine-3"><a href="#CryEngine-3" class="headerlink" title="CryEngine 3"></a>CryEngine 3</h4><p>该游戏引擎以优质的画面输出获得了大量开发者认可，如果你要做视觉出色的游戏，这款引擎绝对是最理想的选择。不过，该引擎也有自己的问题。</p>
<p>优点：CryEngine 3可以让你的游戏更美丽，Flowgraph工具的美术编程能力非常强悍。该引擎具备最强悍的音频工具，所以音频策划和程序猿们非常喜欢。该游戏引擎还提供目前最为简单易用的AI代码技术，对于初入行的开发者，该引擎的UI触手可及。</p>
<p>缺点：免费榜缺乏客户支持；推出时间相对较晚，开发者社区还不够强大；学习门槛对于初入行这比较高。</p>
<h4 id="HeroEngine"><a href="#HeroEngine" class="headerlink" title="HeroEngine"></a>HeroEngine</h4><p>该引擎在MMO和在线游戏领域获得了非常高的人气，代表作《星球大战：旧共和国》。对于新入行的开发者以及初创公司来说，授权费用较高，不过，如果你有一个非常具备潜力的项目，该引擎还是非常值得考虑的。以下是使用该引擎之前需要考虑的优点与缺点：</p>
<p>优点：提供多个开放世界地图，而且可以实现无缝转换；提供相对完善的AI；地图工具简单易用，并且集成了多个工具；脚本强大，足够帮助开发者研发复杂的项目、获得需要的资源；可以通过HeroCloud支持客户服务器。</p>
<p>缺点：脚本引擎强大但不够直观；HeroEngine和HeroCloud对于初创公司来说成本较高；新开发者学习门槛较高。</p>
<h4 id="Rage-Engine"><a href="#Rage-Engine" class="headerlink" title="Rage Engine"></a>Rage Engine</h4><p>该引擎的用途非常多，比较知名的游戏包括GTA Ⅲ、GTA：Vice City、GTA：San Andreas和很多知名大作。以下是该引擎的一些优点和缺点：</p>
<p>优点：兼容与处理较大世界观和天气特效方面非常出色；复杂的AI设计方面领先其他引擎；非常适合多种玩法的游戏；网络编程速度非常快；非常具有吸引力的画质水平。</p>
<p>缺点：和其他顶级引擎相比界面比较差；对于键盘和鼠标控制优化做的不足。</p>
<h4 id="Project-Anarchy"><a href="#Project-Anarchy" class="headerlink" title="Project Anarchy"></a>Project Anarchy</h4><p>该引擎是一套完整的端到端游戏引擎和尖端移动设备工具组，受到很多游戏开发者赞誉，但同样具有一些缺点。</p>
<p>优点：提供免费的手游研发工具（主要平台，比如iOS、Android和Tizen）；拥有非常强悍的程序调试工具；非常活跃的开发者社区与论坛；编辑器非常强大；音频输出能力非常好；优秀的Havok AI；vForge为开发者提供大量的定制化选择。</p>
<p>缺点：不支持Mac和Linux开发环境；没有新手教学；对于初创公司来说成本较高。</p>
<h4 id="GameSalad"><a href="#GameSalad" class="headerlink" title="GameSalad"></a>GameSalad</h4><p>这款引擎据说是不用写代码就能做游戏。这并不是个噱头，该引擎的确支持这样的功能。不过GameSalad一些功能也并不好用。</p>
<p>优点：如果你想独立开发一款iPhone游戏，该引擎非常适合你；对于快速实现游戏想法来说，GameSalad是个不错的引擎；兼容流行的手游研发平台，比如Cocona和Moai。</p>
<p>缺点：研发工具限制性比较强；缺乏大量的iOS功能；不兼容所有的平台。</p>
<h4 id="App-Game-Kit"><a href="#App-Game-Kit" class="headerlink" title="App Game Kit"></a>App Game Kit</h4><p>该引擎是真正的跨平台研发工具，非常易用、简单，而且比较灵活。以下是该引擎的优缺点：</p>
<p>优点：可以为多平台写代码，包括Android、iOS、Windows、Mac和Linux；集成Design Environment，可以在任何设备调试；加入了IAP、AdMob以及Push等工具；AGK脚本非常强大。</p>
<p>缺点：使用者较少，所以学习起来相对较慢；BUG比较多；传感器或者GPS支持比较差。</p>
<h4 id="Cocos2D"><a href="#Cocos2D" class="headerlink" title="Cocos2D"></a>Cocos2D</h4><p>很多策划认为Cocos2D对于新入行的开发者来说不仅具备大量功能，而且非常容易上手。虽然该引擎比较复杂，但值得一提的是其功能和灵活性，以下是该引擎的优缺点：</p>
<p>优点：强大而且灵活；理论上来讲，你可以为自己的游戏加入所有的iOS功能；提供成熟的框架和多种工具；开源、免费，社区支持强大。</p>
<p>缺点：和同类引擎相比比较复杂；学习门槛相对较高；特别适合Mac或者iOS平台，不过并不是跨平台引擎。</p>
<p>如今人们在各种平台都玩游戏，比如主机、移动设备甚至是智能电视，所以，开发商在选择引擎的时候，需要找到适合自己技术并且能够满足目标市场要求的引擎，因此合适的引擎对于开发商们来说尤其重要，特别是新入行的开发者们。</p>
<p>转载自 <a href="http://www.gamelook.com.cn/2014/08/176661" target="_blank" rel="external">GameLook</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;游戏研发引擎对比&quot;&gt;&lt;a href=&quot;#游戏研发引擎对比&quot; class=&quot;headerlink&quot; title=&quot;游戏研发引擎对比&quot;&gt;&lt;/a&gt;游戏研发引擎对比&lt;/h3&gt;&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;GameLook报道/随着手游的快速增
    
    </summary>
    
      <category term="游戏" scheme="http://tusko.cn/categories/%E6%B8%B8%E6%88%8F/"/>
    
    
      <category term="游戏" scheme="http://tusko.cn/tags/%E6%B8%B8%E6%88%8F/"/>
    
      <category term="转载" scheme="http://tusko.cn/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>UCT搜索算法</title>
    <link href="http://tusko.cn/2016/02/10/UCT%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95/"/>
    <id>http://tusko.cn/2016/02/10/UCT搜索算法/</id>
    <published>2016-02-10T08:05:00.000Z</published>
    <updated>2017-08-27T16:15:12.624Z</updated>
    
    <content type="html"><![CDATA[<h3 id="算法简介"><a href="#算法简介" class="headerlink" title="算法简介"></a>算法简介</h3><h4 id="多臂匪徒"><a href="#多臂匪徒" class="headerlink" title="多臂匪徒"></a>多臂匪徒</h4><p>&#160; &#160; &#160; &#160;UCT算法是UCB策略与蒙特卡罗规划的结合体，在UCB算法中加入蒙特卡罗就形成了我们要介绍的UCT搜索。因此在介绍UCT搜索之前，我们先来了解下UCB策略和蒙特卡罗规划。</p>
<p>&#160; &#160; &#160; &#160;首先，介绍下多臂匪徒问题。多臂匪徒问题就是说，有一个有K个拉手的老虎机，赌徒要从这些拉手中选出一个拉手，从而获得可能值为正值，0，负值的回报。在某个特定时间内，赌徒只能拉动一个拉手。当赌徒在老虎机面前时，他是没有任何头绪的。因为对他而言，每个拉手获得好的回报的概率是一样的，他也不知道该怎么选。他只能不断试探，发现拉手的规律后，推断哪个拉手获得的回报最大。为了让赌徒得到尽可能大的回报，我们需要找到一种策略，UCB策略就是这样一种可以解决多臂匪徒问题的策略。下面就是UCB策略的算法流程图：</p>
<p><img src="/image_save/多臂匪徒.png" alt="多臂匪徒"></p>
<h4 id="蒙特卡罗应用于博弈树"><a href="#蒙特卡罗应用于博弈树" class="headerlink" title="蒙特卡罗应用于博弈树"></a>蒙特卡罗应用于博弈树</h4><p>&#160; &#160; &#160; &#160;蒙特卡罗规划是以蒙特卡罗方法的一种规划。在蒙特卡规划罗建立的博弈树中，从初始状态开始，重复给出抽样，然后扩展到树中的每一个节点。在不围棋中，即是说在选点时，如果对可选点中找出一些较好的节点进行上万，上百万次地模拟，如果采用合适的评估函数 ，那么在这些节点就会聚集大量模拟。在计算机博弈中，蒙特卡罗规划通常用来解决棋子落点问题。蒙特卡罗规划的伪代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"> while 模拟时间未用完 do</div><div class="line">      从当前状态的子节点中选择一个节点</div><div class="line">      if 该节点是第一次被访问 then</div><div class="line">         利用蒙特卡罗评估，得出胜负结果</div><div class="line">          更新相关节点的方向次数和获胜次数</div><div class="line">      else </div><div class="line">          回到2</div><div class="line">      end if</div><div class="line"> end while</div><div class="line">利用合适的方式选择最后的决策结果</div></pre></td></tr></table></figure>
<h4 id="UCT算法原理"><a href="#UCT算法原理" class="headerlink" title="UCT算法原理"></a>UCT算法原理</h4><h5 id="UCT与蒙特卡罗区别"><a href="#UCT与蒙特卡罗区别" class="headerlink" title="UCT与蒙特卡罗区别"></a>UCT与蒙特卡罗区别</h5><p>&#160; &#160; &#160; UCT算法使<strong>UCB策略与蒙特卡罗规划相结合</strong>。它跟蒙特卡罗规则的区别：</p>
<ol>
<li>UCT算法对于可下子点的选择不是随机的，而是根据UCB值来选择的。如果可下点没有被访问，其UCB值无穷大，因为要使这些没有被访问的节点有机会被访问，以便遗漏掉好的可下点。如果可下点被访问过，根据UCB公式计算出UCB值。最终，我们选择UCB值最大的值作为可下点。</li>
<li>模拟结束后选择可下点时，不是根据根据胜率来进行判断，而是根据可下点的访问次数，哪个点被访问的次数最多，哪个点就是我们选择的最终结果。</li>
</ol>
<p>&#160; &#160; &#160; UCT算法通过迭代来逐渐扩展博弈树。逐渐扩展是指，对某一个节点来说，它并不是直接扩展子节点，然后计算结果，而是在扩展节点时先对有可能成为子节点的节点进行评估，然后根据评估结果对子节点排序，最后根据排序顺序扩展子节点。这个评估结果的值就是 上面提到的UCB值。</p>
<p>&#160; &#160; &#160; UCB值兼顾探勘(exploitation)和探测(exploration)，这体现在UCB值既要考虑胜率高的节点又要考虑很少被访问的节点。UCB探勘胜率高的好节点，来拓展搜索的深度，进一步确认该节点是好节点；探测很少被访问到的节点，来扩展搜索的宽度，寻找一开始没找到的好节点。</p>
<p>&#160; &#160; &#160; 由此可知，节点的胜率越高或者越少被访问，那么这个节点UCB值就越高。UCB公式如下：</p>
<h5 id="UCB公式"><a href="#UCB公式" class="headerlink" title="UCB公式"></a>UCB公式</h5><p><img src="/image_save/ucb公式.png" alt="ucb公式"></p>
<p>&#160; &#160; &#160;在这个公式中， Wi表示子节点i的胜利次数，Ni表示子节点 i的访问次数，Np表示节点 p 的访问次數，Cbias是一個常数。最后节点p 会选择分数最高的子节点。此公式左边是探勘的部分，分数越高表示此节点胜率越高，之后被访问的几率也越高。右边部分是探索的部分，当节点 p 访问次数增加后，其访问次数越低的子节点在此部分就会得到越高的评估值，使其有机会被访问到。常数 Cbias是用來決定要重探勘还是重探索。</p>
<h5 id="UCT流程图"><a href="#UCT流程图" class="headerlink" title="UCT流程图"></a>UCT流程图</h5><p><img src="/image_save/uct流程图.png" alt="uct流程图"></p>
<h3 id="UCT搜索伪代码"><a href="#UCT搜索伪代码" class="headerlink" title="UCT搜索伪代码"></a>UCT搜索伪代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">PlayRandGame: 双方根据规则随机交替落子</div><div class="line">UpdateTree:更新UctTree的节点访问次数及相关收益</div><div class="line">ExpandNode:扩展子节点</div><div class="line">UCT核心伪代码如下:</div><div class="line">UctNode UctPlay(UctTree tree)</div><div class="line">&#123;</div><div class="line">	UctNode *current = &amp;tree.m_node;//从UCT树中取出当前局面作当前节点</div><div class="line">	while(!OverTimeLimit())</div><div class="line">	&#123;//若未超过时间限制</div><div class="line">		if (current.HasChild())</div><div class="line">		&#123;//当前节点是叶子点</div><div class="line">			UctState state = PlayRandGame(*current);//进行蒙特卡罗模拟</div><div class="line">			UpdateTree(state);//根据随机模拟结果更新UctTree访问及收益</div><div class="line">			if (current.m_visitor &gt; N)</div><div class="line">			&#123;   //若该节点访问次数到一定次数N</div><div class="line">				ExpandNode(*current);//展开子节点</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		else</div><div class="line">		&#123;//当前节点不是叶子节点</div><div class="line">			current = FindBestChild(*current);//取UCB最大的子节点作当前节点</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	return tree.FindBestNode();返回树中访问次数最多的节点</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;算法简介&quot;&gt;&lt;a href=&quot;#算法简介&quot; class=&quot;headerlink&quot; title=&quot;算法简介&quot;&gt;&lt;/a&gt;算法简介&lt;/h3&gt;&lt;h4 id=&quot;多臂匪徒&quot;&gt;&lt;a href=&quot;#多臂匪徒&quot; class=&quot;headerlink&quot; title=&quot;多臂匪徒&quot;&gt;&lt;/a
    
    </summary>
    
      <category term="计算机博弈" scheme="http://tusko.cn/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8D%9A%E5%BC%88/"/>
    
    
      <category term="计算机博弈" scheme="http://tusko.cn/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8D%9A%E5%BC%88/"/>
    
      <category term="计算机博弈算法" scheme="http://tusko.cn/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8D%9A%E5%BC%88%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>AlphaBeta剪枝算法</title>
    <link href="http://tusko.cn/2016/01/03/alphabeta%E5%89%AA%E6%9E%9D%E7%AE%97%E6%B3%95/"/>
    <id>http://tusko.cn/2016/01/03/alphabeta剪枝算法/</id>
    <published>2016-01-02T16:00:02.000Z</published>
    <updated>2017-08-19T11:29:40.923Z</updated>
    
    <content type="html"><![CDATA[<h3 id="算法简介"><a href="#算法简介" class="headerlink" title="算法简介"></a>算法简介</h3><h4 id="AlphaBeta剪枝算法"><a href="#AlphaBeta剪枝算法" class="headerlink" title="AlphaBeta剪枝算法"></a>AlphaBeta剪枝算法</h4><p>&#160; &#160; &#160; &#160;极大极小值搜索算法计算的是整个博弈搜索树的复杂度，对国际跳棋而言假设每个局面只有9个走步，搜索10层的情况下就有9^10个博弈树节点需要探索，在优先的计算机资源下，无论从时间还是空间上来看，都是不可以接受的。AlphaBeta搜索算法就是用来解决来剪枝掉一些不必要的节点。 </p>
<p>&#160; &#160; &#160; &#160;Alpha-Beta剪枝算法是建立在MiniMax算法基础上的，其特点是在博弈树上进行搜索时加上了alpha剪枝和beta剪枝。以下为alpha剪枝和beta剪枝示例：</p>
<p><img src="/image_save/alpha剪枝.png" alt="alpha剪枝"></p>
<p><img src="/image_save/beta剪枝.png" alt="beta剪枝"></p>
<p>&#160; &#160; &#160; &#160;如上图，<strong>其中正方形节点取极大值，圆形节点取极小值</strong>。图（a）中节点B的估值为18,节点C取极小值，则取节点D、E、F中最小估值的。由于节点D的估值为16，则节点C取值小于等于16。但是最终节点A取极大值在节点B、C中，所以，节点A一定取的为节点B的值18。那么，节点E、F不必进行估值搜索。因此C-E，C-F分支及节点C的子节点的分支全部被alpha剪枝。</p>
<p>&#160; &#160; &#160; &#160;图(b)中节点B估值为8，节点C取极大值，取节点D、E、F中最大估值的。节点D的估值18，则节点C的估值大于或等于18。但是节点A取极小值，所以节点A取节点B的值。节点C的其他分支被beta剪枝。</p>
<p>&#160; &#160; &#160; &#160;Alpha-Beta 剪枝算法的效率很大程度上依赖于节点的排列，在理想状态的排序下,最大效率前提，可以使搜索节点的数量减小一半，这样就能提高搜索速率，从而使在相同时间下的搜索深度增加一倍。可能读者以为提升一层深度有什么了不起，如果了解指数爆炸我们就知道这是巨大的提升，带来的是更快的速率。</p>
<p>&#160; &#160; &#160; &#160;算法使用了两个值，分别为alpha和beta，alpha和beta的意义分别代表最佳得分的最小下界和最大上界，即是最好的值和最差的值。最初alpha，beta被设为无穷大和无穷小，伴随着搜索的不断进行，这个上界和下界在不断博弈的情况下逐渐收敛成为一个相对较优的值。</p>
<p>（1）任何max节点的alpha值大于其父节点的beta值，则把该节点剩余的枝剪下去，因为这说明该节点之前至少有一个节点alpha值比它的上界还要小，也就是无论如何这个值比现有最坏情况还要坏，对敌方而言，所以敌方不会选这个路径作为最好走步，反之如果选择了，则他选择的是更坏的走步。而父节点是min节点，所以这个节点显然不是min节点所想要的。或者说这个节点对对手非常有利。<br>（2）同理任何min节点的beta值小于父节点alpha值，则把该节点剩余的枝剪去。</p>
<h3 id="伪代码"><a href="#伪代码" class="headerlink" title="伪代码"></a>伪代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">int Alpha_Beta(nDepth, nAlpha, nBeta)</div><div class="line">&#123;</div><div class="line">	int score;</div><div class="line">	if(Game Over)</div><div class="line">		return Eveluation;// 游戏结束返回估值</div><div class="line">	</div><div class="line">	if(nDepth == 0)</div><div class="line">		return Eveluation;// 叶子节点返回估值</div><div class="line">	</div><div class="line">	if(IsMini Node)// 当为取极小值的节点</div><div class="line">	&#123;</div><div class="line">		for(each possible move m)</div><div class="line">		&#123;</div><div class="line">			make move m;</div><div class="line">			score = Alpha_Beta(nDepth-1, nAlpha, nBeta);// 递归搜索子节点</div><div class="line">			unmake move m;</div><div class="line">			if(score &lt; nBeta)</div><div class="line">			&#123;</div><div class="line">				nBeta = score; // 取极小值</div><div class="line">				if(nAlpha &gt;= nBeta)// beta剪枝</div><div class="line">					return nAlpha;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	else</div><div class="line">	&#123;</div><div class="line">		for(each possible move m)</div><div class="line">		&#123;</div><div class="line">			make move m;</div><div class="line">			score = Alpha_Beta(nDepth-1, nAlpha, nBeta);// 递归搜索子节点</div><div class="line">			unmake move m;</div><div class="line">			if(score &gt; nAlpha)</div><div class="line">			&#123;</div><div class="line">				nAlpha = score; // 取极大值</div><div class="line">				if(nAlpha &gt;= nBeta)// alpha 剪枝</div><div class="line">					return nBeta;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	return nAlpha;// 返回极大值</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;算法简介&quot;&gt;&lt;a href=&quot;#算法简介&quot; class=&quot;headerlink&quot; title=&quot;算法简介&quot;&gt;&lt;/a&gt;算法简介&lt;/h3&gt;&lt;h4 id=&quot;AlphaBeta剪枝算法&quot;&gt;&lt;a href=&quot;#AlphaBeta剪枝算法&quot; class=&quot;headerlink
    
    </summary>
    
      <category term="计算机博弈" scheme="http://tusko.cn/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8D%9A%E5%BC%88/"/>
    
    
      <category term="计算机博弈" scheme="http://tusko.cn/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8D%9A%E5%BC%88/"/>
    
      <category term="计算机博弈算法" scheme="http://tusko.cn/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8D%9A%E5%BC%88%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>极大值极小值算法</title>
    <link href="http://tusko.cn/2015/10/06/%E6%9E%81%E5%A4%A7%E5%80%BC%E6%9E%81%E5%B0%8F%E5%80%BC%E7%AE%97%E6%B3%95/"/>
    <id>http://tusko.cn/2015/10/06/极大值极小值算法/</id>
    <published>2015-10-06T07:38:46.000Z</published>
    <updated>2017-08-06T08:57:18.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="算法简介"><a href="#算法简介" class="headerlink" title="算法简介"></a>算法简介</h3><h4 id="极大值极小值算法"><a href="#极大值极小值算法" class="headerlink" title="极大值极小值算法"></a>极大值极小值算法</h4><p>&#160; &#160; &#160; &#160;在计算机博弈中，极大极小搜索算法是一种简单常见、便于理解的启发式搜索。因此在介绍极大极小搜索之前，我们先来介绍启发式搜索。</p>
<p>&#160; &#160; &#160; &#160;盲目搜索解决可以穷尽的问题。但事实上，这种理论上可以穷尽的搜索问题并不常见，我们见到更多的搜索问题状态空间往往是无法穷尽的，因此此时就会使用启发式搜索。这种启发式搜索只搜索博弈树中的一部分，然后采用启发方式引导博弈往利于己方获胜的方向发展。计算机通常会研究并发现一系列规则来形成启发方式，然后选择出一条可以解决问题的最佳路径。</p>
<p>&#160; &#160; &#160; &#160;极大极小搜索是一种在有限深度内搜索的启发式搜索。这里，我们用一个形象的例子来说明极大极小搜索。甲、乙两位玩家玩一个不清楚规则的游戏。在游戏过程中，甲方希望获得尽可能高的分数，而乙方恰恰希望甲方获得尽可能低的分数。这个游戏过程即是说：甲方在玩游戏时应尽量让自己的分数变大，而乙方则尽量让甲方分数变低。游戏中甲、乙双方使分数极大极小的过程就是极大极小搜索。</p>
<p>&#160; &#160; &#160; &#160;极大极小值算法是根据零和博弈的特点，在与对手的博弈中，模拟整个博弈的过程。在己方的所有决策中找出相对于自己最大收益的决策；假设我方能知道对方的所有决策，根据我方判断，在对手的决策所有决策中找到使己方最小收益的决策。</p>
<p>以下为一棵极大极小值搜索树:</p>
<p><img src="/images/极大极小值算法_1.png" alt="极大极小值搜索树"></p>
<p>&#160; &#160; &#160; &#160;如上图所示，它是一棵以当前局面为根节点而展开的5层博弈树，我们把偶数层记为Max层，把奇数层记为Min层，当博弈树扩展到叶子节点后，自底向上，我们倒推每个节点的值。如果父节点是在Max层，通过比较后，将子节点中的最大值赋给它；而如果是在Min层，通过比较后，将它节点中的最小值赋给它。递归进行，最终可以得知根节点的哪个子节点能让自己的局面优势最大或者说让对方的哪个局面优势最小。</p>
<p>以下是一棵二人博弈树:<br><img src="/images/二人博弈树.png" alt="二人博弈树"></p>
<p>&#160; &#160; &#160; &#160;根节点为A，其子节点B、C、D分别为我方产生一种行为后形成的另一种局面，节点E、F、G、H、I分别是对方在其父节点上产生一种行为后形成的局面。<br>&#160; &#160; &#160; &#160;通过极大极小值算法对该博弈树进行搜索之前，首先需要对此博弈树的叶子节点进行估值，假设其叶子节点估值如下：</p>
<p><img src="/images/二人博弈树估值.png" alt="二人博弈树估值"></p>
<p>&#160; &#160; &#160; &#160;根据极大极小值算法的原理，在第三层为对方产生行为后形成的局面，取极小值。节点B取节点E、F、G中估值最小的，所以节点B的估值为节点G的估值，为-11；节点D的估值为节点H、I中估值最小的，为-999；在第二层中为我方产生行为后形成的局面，则取极大值。此时，节点B估值为-11，节点C估值为-100，节点D估值为-999。则取节点B、C、D中估值最大的，所以节点A取节点B的估值。最后，我方取的最终行为是产生节点B局面的行为。<br>&#160; &#160; &#160; &#160;另外，极大极小值算法是基于静态估值函数的，且其博弈树的深度是有限的，到设定的深度后需返回其叶子节点的估值。</p>
<p>极小值算法伪代码:<br><img src="/images/极小值算法伪代码.png" alt="极小值算法伪代码"></p>
<p>极大值算法伪代码:<br><img src="/images/极大值算法伪代码.png" alt="极大值算法伪代码"></p>
<h4 id="负极大值算法"><a href="#负极大值算法" class="headerlink" title="负极大值算法"></a>负极大值算法</h4><p>&#160; &#160; &#160; &#160;当极大极小搜索应用于双人棋类博弈时，负极大搜索算法是其的简单变形。根据博弈的定义，对于同一个盘面，甲方对其评估值总是乙方对其评估值的相反数。因此，当前盘面的落子一方需要从所有下一个盘面评估值的相反数中取极大值，而下一个盘面评估值必须按照对手来评估。并且，该搜索步骤对于甲、乙双方均适用。负极大搜索算法与极小极大搜索算法具有相同的复杂度，只是简化了代码量，并没有对搜索节点数目进行缩减，下面我们讨论的负极大值搜索算法就对树的节点进行了剪枝，减小了搜索复杂度。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;算法简介&quot;&gt;&lt;a href=&quot;#算法简介&quot; class=&quot;headerlink&quot; title=&quot;算法简介&quot;&gt;&lt;/a&gt;算法简介&lt;/h3&gt;&lt;h4 id=&quot;极大值极小值算法&quot;&gt;&lt;a href=&quot;#极大值极小值算法&quot; class=&quot;headerlink&quot; title=&quot;极
    
    </summary>
    
      <category term="计算机博弈" scheme="http://tusko.cn/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8D%9A%E5%BC%88/"/>
    
    
      <category term="计算机博弈" scheme="http://tusko.cn/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8D%9A%E5%BC%88/"/>
    
      <category term="计算机博弈算法" scheme="http://tusko.cn/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8D%9A%E5%BC%88%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>极大极小值算法-井字棋实现</title>
    <link href="http://tusko.cn/2015/08/30/%E6%9E%81%E5%A4%A7%E6%9E%81%E5%B0%8F%E5%80%BC%E4%BA%95%E5%AD%97%E6%A3%8B/"/>
    <id>http://tusko.cn/2015/08/30/极大极小值井字棋/</id>
    <published>2015-08-30T03:59:41.000Z</published>
    <updated>2017-08-06T08:55:00.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="项目说明"><a href="#项目说明" class="headerlink" title="项目说明"></a>项目说明</h3><p>&#160; &#160; &#160; &#160;在玩家之间玩井字棋，基本上只会出现平局的结果，那么如何让计算机也能模拟人那样，思考并择优下棋，便涉及到计算机博弈的相关知识了，主要知识如下:</p>
<ol>
<li>棋盘表示</li>
<li>博弈树</li>
<li>估值与搜索算法</li>
</ol>
<h4 id="棋盘表示"><a href="#棋盘表示" class="headerlink" title="棋盘表示"></a>棋盘表示</h4><p>对于井字棋，采用3*3的二维数组.<br>因为数组根据下标定位，访问数组任一点的复杂度为O(1).</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#define COM -1   </div><div class="line">#define MAN 1</div></pre></td></tr></table></figure>
<p>其中0,1,-1分别表示棋盘上的空位,人下棋,计算机下棋.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//棋盘  </div><div class="line">int board[3][3] = &#123; &#123; 0,0,0 &#125;,  </div><div class="line">                    &#123; 0,0,0 &#125;,  </div><div class="line">                    &#123; 0,0,0 &#125;  </div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h4 id="博弈树"><a href="#博弈树" class="headerlink" title="博弈树"></a>博弈树</h4><p>其次,假设有两人对弈,我们将其中一位叫做甲,另一位叫做乙.假定现在该甲走棋,甲可以有40种走法(不论好坏),而对甲的任一走法,乙也可以有与之相对的若干种走法.然后又轮到甲走棋,对乙的走法甲又有若干种方法应对…如此往复</p>
<p>而所有这些走法罗列出来,在计算机中构成一棵博弈树,节点根部为棋局的初始局面,根的子节点为甲所有可能的走法构成的新局面,而这些子节点的子节点则是与之相对的乙所有可能的走法构成的局面.而这些节点的末梢,是结束的棋局,即甲胜或者乙胜或者是平局.示例图如下:</p>
<p><img src="/images/井字棋博弈树.png" alt="井字棋博弈树"></p>
<p>再者,计算机是不会像人那样思考的,要实现计算机的只能,必须依靠算法实现.最常见的算法便是搜索算法,即搜索所有可能出现的局面,在其中选择一个能获胜的局面下棋.但这样是不现实的,因为每一步棋产生的局面实在太多,如19路围棋,其走法用最顶级的计算机来算,算到地球毁灭都不一定算得完.而其他棋类也有类似的情况,计算机没有足够资源在可行时间内穷尽所有走法.</p>
<p>传统的搜索算法不可行,那么计算机要通过什么样的方式得到最优局面呢?</p>
<p>是剪枝算法,在搜索中依据一个函数对不必要搜索节点进行过滤,剪枝.这个函数即评估函数,这种搜索算法称为启发式搜索.</p>
<p>而评估函数的好坏直接决定搜索的效率快慢.</p>
<p>博弈树中最基础的搜索算法,是基于深度优先搜索的极大值极小值算法.这里的极大极小值算法是相对而言的,在某一局面中,若甲胜取极大,甲负取极小,则甲要选择评估函数值尽量大的局面,而乙正好相反.</p>
<p><strong>关于极大值极小值算法,可以参考[这篇文章].</strong></p>
<h4 id="井字棋的评估函数"><a href="#井字棋的评估函数" class="headerlink" title="井字棋的评估函数"></a>井字棋的评估函数</h4><p>评估函数没有定式,是否合理准确只有通过实战检验.假设一个新同学读学长写的代码场景,新同学可能会问,为什么这个估值为什么是0.5,而另一个程序是0.8呢?为什么你的程序这样评估局面,而网上的程序是那样子的?这就是仁者见仁,智者见智了,评估函数的实现与开发者的对棋牌规则了解程度、想法、心情不同而有所差异.但是只有抓住耗子的猫才是好猫~</p>
<p><strong>这里给出一种井字棋的评估函数:</strong><br>将当前局面填满自己的子,然后以有双方连成3棋子的行,列,斜相减得到的值来评估局面的好坏.代码如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">//评估函数  </div><div class="line">int evaluteMap() &#123;  </div><div class="line">  </div><div class="line">    bool flag = true;  </div><div class="line">    int i, j;  </div><div class="line">  </div><div class="line">    if (isWin() == COM)  </div><div class="line">        return MAX_NUM;//如果计算机赢了，返回最大值   </div><div class="line">    if (isWin() == MAN)  </div><div class="line">        return -MAX_NUM;//如果计算机输了，返回最小值   </div><div class="line"> </div><div class="line">    int count = 0;//该变量用来表示评估函数的值  </div><div class="line">                  //将棋盘中的空格填满自己的棋子，既将棋盘数组中的0变为1  </div><div class="line">    for (i = 0; i &lt; 3; i++)  </div><div class="line">        for (j = 0; j &lt; 3; j++)  </div><div class="line">        &#123;  </div><div class="line">            if (board[i][j] == 0)  </div><div class="line">                tempBoard[i][j] = COM;  </div><div class="line">            else  </div><div class="line">                tempBoard[i][j] = board[i][j];  </div><div class="line">        &#125;  </div><div class="line">    //电脑一方  </div><div class="line">    //计算每一行中有多少行的棋子连成3个的  </div><div class="line">    for (i = 0; i &lt; 3; i++)  </div><div class="line">        count += (tempBoard[i][0] + tempBoard[i][1] + tempBoard[i][2]) / 3;  </div><div class="line">    for (i = 0; i &lt; 3; i++)  </div><div class="line">        count += (tempBoard[0][i] + tempBoard[1][i] + tempBoard[2][i]) / 3;  </div><div class="line">    count += (tempBoard[0][0] + tempBoard[1][1] + tempBoard[2][2]) / 3;  </div><div class="line">    count += (tempBoard[2][0] + tempBoard[1][1] + tempBoard[0][2]) / 3;  </div><div class="line">  </div><div class="line">    //将棋盘中的空格填满对方的棋子，既将棋盘数组中的0变为-1  </div><div class="line">    for (i = 0; i &lt; 3; i++)  </div><div class="line">        for (j = 0; j &lt; 3; j++)  </div><div class="line">        &#123;  </div><div class="line">            if (board[i][j] == 0)  </div><div class="line">                tempBoard[i][j] = MAN;  </div><div class="line">            else tempBoard[i][j] = board[i][j];  </div><div class="line">        &#125;  </div><div class="line">    //对方  </div><div class="line">    //计算每一行中有多少行的棋子连成3个的  </div><div class="line">    for (i = 0; i &lt; 3; i++)  </div><div class="line">        count += (tempBoard[i][0] + tempBoard[i][1] + tempBoard[i][2]) / 3;  </div><div class="line">    for (i = 0; i &lt; 3; i++)  </div><div class="line">        count += (tempBoard[0][i] + tempBoard[1][i] + tempBoard[2][i]) / 3;  </div><div class="line">    count += (tempBoard[0][0] + tempBoard[1][1] + tempBoard[2][2]) / 3;  </div><div class="line">    count += (tempBoard[2][0] + tempBoard[1][1] + tempBoard[0][2]) / 3;  </div><div class="line">  </div><div class="line">    return count;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="程序实现"><a href="#程序实现" class="headerlink" title="程序实现"></a>程序实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div></pre></td><td class="code"><pre><div class="line">#include &lt;stdio.h&gt;</div><div class="line">#include &lt;conio.h&gt; </div><div class="line">#define COM -1 </div><div class="line">#define MAN 1</div><div class="line">#define STEP 9 </div><div class="line">#define DRAW 0 </div><div class="line">#define ROW 3 </div><div class="line">#define COL 3</div><div class="line">#define MAX_NUM 1000;</div><div class="line"></div><div class="line"></div><div class="line">struct Move</div><div class="line">&#123;</div><div class="line">	int x;</div><div class="line">	int y;</div><div class="line"></div><div class="line">&#125;;</div><div class="line"></div><div class="line">//棋盘</div><div class="line">int board[3][3] = &#123; &#123; 0,0,0 &#125;,</div><div class="line">					&#123; 0,0,0 &#125;,</div><div class="line">					&#123; 0,0,0 &#125;</div><div class="line">&#125;;</div><div class="line">int tempBoard[3][3] = &#123; &#123; 0,0,0 &#125;,</div><div class="line">						&#123; 0,0,0 &#125;,</div><div class="line">						&#123; 0,0,0 &#125;</div><div class="line">&#125;;</div><div class="line">//玩家</div><div class="line">int player = MAN;</div><div class="line">//最好的一步</div><div class="line">Move bestMove;</div><div class="line">//当前深度</div><div class="line">int currentDepth;</div><div class="line">//谁先走</div><div class="line">bool MAN_first = true;</div><div class="line"></div><div class="line"></div><div class="line">//判断输赢</div><div class="line">int isWin() &#123;</div><div class="line">	int i, j;</div><div class="line"></div><div class="line">	for (int i = 0; i &lt; 3; i++)</div><div class="line">	&#123;</div><div class="line">		if (board[i][0] + board[i][1] + board[i][2] == 3)</div><div class="line">			return 1;</div><div class="line">		else if (board[i][0] + board[i][1] + board[i][2] == -3)</div><div class="line">			return -1;</div><div class="line">	&#125;</div><div class="line">	for (int j = 0; j &lt; 3; j++)</div><div class="line">	&#123;</div><div class="line">		if (board[0][j] + board[1][j] + board[2][j] == 3)</div><div class="line">			return 1;</div><div class="line">		else if (board[0][j] + board[1][j] + board[2][j] == -3)</div><div class="line">			return -1;</div><div class="line">	&#125;</div><div class="line">	if (board[0][0] + board[1][1] + board[2][2] == 3 || board[0][2] + board[1][1] + board[2][0] == 3)</div><div class="line">		return 1;</div><div class="line">	else if (board[0][0] + board[1][1] + board[2][2] == -3 || board[0][2] + board[1][1] + board[2][0] == -3)</div><div class="line">		return -1;</div><div class="line">	else  return 0;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">//评估函数</div><div class="line">int evaluteMap() &#123;</div><div class="line"></div><div class="line">	bool flag = true;</div><div class="line">	int i, j;</div><div class="line"></div><div class="line">	if (isWin() == COM)</div><div class="line">		return MAX_NUM;//如果计算机赢了，返回最大值 </div><div class="line">	if (isWin() == MAN)</div><div class="line">		return -MAX_NUM;//如果计算机输了，返回最小值 </div><div class="line"></div><div class="line"></div><div class="line">	int count = 0;//该变量用来表示评估函数的值</div><div class="line">				  //将棋盘中的空格填满自己的棋子，既将棋盘数组中的0变为1</div><div class="line">	for (i = 0; i &lt; 3; i++)</div><div class="line">		for (j = 0; j &lt; 3; j++)</div><div class="line">		&#123;</div><div class="line">			if (board[i][j] == 0)</div><div class="line">				tempBoard[i][j] = COM;</div><div class="line">			else</div><div class="line">				tempBoard[i][j] = board[i][j];</div><div class="line">		&#125;</div><div class="line">	//电脑一方</div><div class="line">	//计算每一行中有多少行的棋子连成3个的</div><div class="line">	for (i = 0; i &lt; 3; i++)</div><div class="line">		count += (tempBoard[i][0] + tempBoard[i][1] + tempBoard[i][2]) / 3;</div><div class="line">	for (i = 0; i &lt; 3; i++)</div><div class="line">		count += (tempBoard[0][i] + tempBoard[1][i] + tempBoard[2][i]) / 3;</div><div class="line">	count += (tempBoard[0][0] + tempBoard[1][1] + tempBoard[2][2]) / 3;</div><div class="line">	count += (tempBoard[2][0] + tempBoard[1][1] + tempBoard[0][2]) / 3;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">	//将棋盘中的空格填满对方的棋子，既将棋盘数组中的0变为-1</div><div class="line">	for (i = 0; i &lt; 3; i++)</div><div class="line">		for (j = 0; j &lt; 3; j++)</div><div class="line">		&#123;</div><div class="line">			if (board[i][j] == 0)</div><div class="line">				tempBoard[i][j] = MAN;</div><div class="line">			else tempBoard[i][j] = board[i][j];</div><div class="line">		&#125;</div><div class="line">	//对方</div><div class="line">	//计算每一行中有多少行的棋子连成3个的</div><div class="line">	for (i = 0; i &lt; 3; i++)</div><div class="line">		count += (tempBoard[i][0] + tempBoard[i][1] + tempBoard[i][2]) / 3;</div><div class="line">	for (i = 0; i &lt; 3; i++)</div><div class="line">		count += (tempBoard[0][i] + tempBoard[1][i] + tempBoard[2][i]) / 3;</div><div class="line">	count += (tempBoard[0][0] + tempBoard[1][1] + tempBoard[2][2]) / 3;</div><div class="line">	count += (tempBoard[2][0] + tempBoard[1][1] + tempBoard[0][2]) / 3;</div><div class="line">	</div><div class="line">	return count;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">void makeMove(Move curMove)</div><div class="line">&#123;</div><div class="line">	board[curMove.x][curMove.y] = player;</div><div class="line">	player = (player == COM) ? MAN : COM;</div><div class="line">&#125;</div><div class="line"></div><div class="line">void unMakeMove(Move curMove) &#123;</div><div class="line">	board[curMove.x][curMove.y] = 0;</div><div class="line">	player = (player == COM) ? MAN : COM;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//得到有空位的集合</div><div class="line">int getMoveList(Move moveList[]) &#123;</div><div class="line">	int moveCount = 0;</div><div class="line">	int i, j;</div><div class="line">	for (i = 0; i &lt; COL; i++)</div><div class="line">	&#123;</div><div class="line">		for (j = 0; j &lt; ROW; j++)</div><div class="line">		&#123;</div><div class="line">			if (board[i][j] == 0)</div><div class="line">			&#123;</div><div class="line">				moveList[moveCount].x = i;</div><div class="line">				moveList[moveCount].y = j;</div><div class="line">				moveCount++;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	return moveCount; //返回一共多少个空的位置 </div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">int miniMaxsearch(int depth)</div><div class="line">&#123;</div><div class="line">	int value;  //估值 </div><div class="line">	int bestValue = 0; //最好的估值</div><div class="line">	int moveCount = 0;</div><div class="line">	int i; int m, n;</div><div class="line">	Move moveList[9];//保存可以下子的位置</div><div class="line">	if (isWin() == COM || isWin() == MAN)</div><div class="line">	&#123;</div><div class="line">		return evaluteMap();  //一般是返回极大极小值</div><div class="line">	&#125;</div><div class="line">	//如果搜索深度耗尽 ， 返回估值 </div><div class="line">	if (depth == 0)</div><div class="line">	&#123;</div><div class="line">		return evaluteMap();</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">	//根据不同的玩家 进行赋值 </div><div class="line">	if (COM == player) &#123;</div><div class="line">		bestValue = -MAX_NUM;</div><div class="line">	&#125;</div><div class="line">	else if (MAN == player)</div><div class="line">	&#123;</div><div class="line">		bestValue = MAX_NUM;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	//一共多少步</div><div class="line">	moveCount = getMoveList(moveList);</div><div class="line"></div><div class="line">	for (i = 0; i &lt; moveCount; i++)</div><div class="line">	&#123;</div><div class="line">		Move curMove = moveList[i];</div><div class="line"></div><div class="line">		makeMove(curMove);</div><div class="line">		value = miniMaxsearch(depth - 1);</div><div class="line">		unMakeMove(curMove);</div><div class="line"></div><div class="line">		if (player == COM)</div><div class="line">		&#123;</div><div class="line">			if (value &gt; bestValue)</div><div class="line">			&#123;</div><div class="line">				bestValue = value;</div><div class="line">				if (depth == currentDepth)</div><div class="line">				&#123;</div><div class="line">					bestMove = curMove;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		else if (player == MAN)</div><div class="line">		&#123;</div><div class="line">			if (value &lt; bestValue)</div><div class="line">			&#123;</div><div class="line">				bestValue = value;</div><div class="line">				if (depth == currentDepth)</div><div class="line">				&#123;</div><div class="line">					bestMove = curMove;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">	 </div><div class="line">	return bestValue;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">//打印棋盘 电脑X  ，玩家O </div><div class="line">void printBoard() &#123;</div><div class="line">	int i, j;</div><div class="line">	for (i = 0; i &lt; COL; i++)</div><div class="line">	&#123;</div><div class="line">		printf(&quot;-------------\n&quot;);</div><div class="line">		for (j = 0; j &lt; ROW; j++)</div><div class="line">		&#123;</div><div class="line">			if (board[i][j] == COM)</div><div class="line">			&#123;</div><div class="line">				printf(&quot;| X &quot;);</div><div class="line">			&#125;</div><div class="line">			else if (board[i][j] == MAN)</div><div class="line">			&#123;</div><div class="line">				printf(&quot;| O &quot;);</div><div class="line">			&#125;</div><div class="line">			else</div><div class="line">			&#123;</div><div class="line">				printf(&quot;|   &quot;);</div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125;</div><div class="line">		printf(&quot;|\n&quot;);</div><div class="line">	&#125;</div><div class="line">	printf(&quot;-------------\n&quot;);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">void com_play() &#123;</div><div class="line">	miniMaxsearch(currentDepth);</div><div class="line">	board[bestMove.x][bestMove.y] = COM;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">void man_play() &#123;</div><div class="line">	int x, y;</div><div class="line">	printf(&quot;请输入位置坐标  e.g ：（0 0）为左上角 （2，2）为右下角 \n&quot;);</div><div class="line">	scanf(&quot;%d&quot;, &amp;x);</div><div class="line">	scanf(&quot;%d&quot;, &amp;y);</div><div class="line"></div><div class="line">	while (x &lt; 0 || x &gt; 2 || y &lt; 0 || y &gt; 2)</div><div class="line">	&#123;</div><div class="line">		printf(&quot;您输入的坐标错误，请重新输入:x:(0~2) , y:(0~2)\n&quot;);</div><div class="line">		scanf(&quot;%d&quot;, &amp;x);</div><div class="line">		scanf(&quot;%d&quot;, &amp;y);</div><div class="line">	&#125;</div><div class="line">	while (board[x][y] != 0)</div><div class="line">	&#123;</div><div class="line">		printf(&quot;该位置已有棋，请重新输入:\n&quot;);</div><div class="line">		scanf(&quot;%d&quot;, &amp;x);</div><div class="line">		scanf(&quot;%d&quot;, &amp;y);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	board[x][y] = MAN;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">void setFirst() &#123;</div><div class="line">	char c;</div><div class="line">	printf(&quot;\nDo you want to play first? y -你先走  , n-电脑先走&quot;);</div><div class="line">	for (c = getche(); c != &apos;Y&apos;&amp;&amp;c != &apos;y&apos;&amp;&amp;c != &apos;N&apos;&amp;&amp;c != &apos;n&apos;; c = getche());</div><div class="line">	if (c == &apos;n&apos; || c == &apos;N&apos;) &#123;</div><div class="line">		MAN_first = false;</div><div class="line">	&#125;</div><div class="line">	printf(&quot;\n&quot;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">void main()</div><div class="line">&#123;</div><div class="line">	currentDepth = 9;</div><div class="line">	int step = 1;</div><div class="line">	setFirst();</div><div class="line">	printBoard();</div><div class="line"></div><div class="line">	if (MAN_first) &#123;</div><div class="line">		player = MAN;</div><div class="line">		for (step = 1; step &lt;= STEP; )</div><div class="line">		&#123;</div><div class="line">			man_play();</div><div class="line">			printBoard();</div><div class="line">			if (player == isWin()) &#123;</div><div class="line">				printf(&quot;您获胜了！！&quot;);</div><div class="line">				break;</div><div class="line">			&#125;</div><div class="line">			step++;</div><div class="line">			currentDepth--;</div><div class="line">			if (step == 10) &#123;</div><div class="line">				printf(&quot;平局 ~~~&quot;);</div><div class="line">				break;</div><div class="line">			&#125;</div><div class="line">			player = (player == COM) ? MAN : COM;</div><div class="line">			com_play();</div><div class="line">			printBoard();</div><div class="line">			if (player == isWin()) &#123;</div><div class="line">				printf(&quot;很遗憾，电脑赢啦！！！&quot;);</div><div class="line">				break;</div><div class="line">			&#125;</div><div class="line">			step++;</div><div class="line">			currentDepth--;</div><div class="line">			player = (player == COM) ? MAN : COM;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	else</div><div class="line">	&#123;</div><div class="line">		player = COM;</div><div class="line">		for (step = 1; step &lt;= STEP; )</div><div class="line">		&#123;</div><div class="line">			com_play();</div><div class="line"></div><div class="line">			printBoard();</div><div class="line">			if (player == isWin()) &#123;</div><div class="line">				printf(&quot;很遗憾，电脑赢啦！！！&quot;);</div><div class="line">				break;</div><div class="line">			&#125;</div><div class="line">			step++;</div><div class="line">			currentDepth--;</div><div class="line">			if (step == 10) &#123;</div><div class="line">				printf(&quot;平局 ~~~&quot;);</div><div class="line">				break;</div><div class="line">			&#125;</div><div class="line">			player = (player == COM) ? MAN : COM;</div><div class="line">			man_play();</div><div class="line">			printBoard();</div><div class="line">			if (player == isWin()) &#123;</div><div class="line">				printf(&quot;您获胜了！！&quot;);</div><div class="line">				break;</div><div class="line">			&#125;</div><div class="line">			step++;</div><div class="line">			currentDepth--;</div><div class="line">			player = (player == COM) ? MAN : COM;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	getch();</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;项目说明&quot;&gt;&lt;a href=&quot;#项目说明&quot; class=&quot;headerlink&quot; title=&quot;项目说明&quot;&gt;&lt;/a&gt;项目说明&lt;/h3&gt;&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;在玩家之间玩井字棋，基本上只会出现平局的结果，那么如何让计算机也能模拟
    
    </summary>
    
      <category term="计算机博弈" scheme="http://tusko.cn/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8D%9A%E5%BC%88/"/>
    
    
      <category term="计算机博弈" scheme="http://tusko.cn/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8D%9A%E5%BC%88/"/>
    
      <category term="计算机博弈算法" scheme="http://tusko.cn/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8D%9A%E5%BC%88%E7%AE%97%E6%B3%95/"/>
    
      <category term="编程" scheme="http://tusko.cn/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>基于经验的井字棋</title>
    <link href="http://tusko.cn/2015/08/17/%E5%9F%BA%E4%BA%8E%E7%BB%8F%E9%AA%8C%E7%9A%84%E4%BA%95%E5%AD%97%E6%A3%8B/"/>
    <id>http://tusko.cn/2015/08/17/基于经验的井字棋/</id>
    <published>2015-08-17T03:11:11.000Z</published>
    <updated>2017-08-06T08:06:24.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="井字棋介绍"><a href="#井字棋介绍" class="headerlink" title="井字棋介绍"></a>井字棋介绍</h3><p>&#160; &#160; &#160; &#160;井字棋，英文名叫Tic-Tac-Toe，是一种在3*3格子上进行的连珠游戏，和五子棋类似，由于棋盘一般不画边框，格线排成井字故得名。游戏需要的工具仅为纸和笔，然后由分别代表O和X的两个游戏者轮流在格子里留下标记（一般来说先手者为X）<br><img src="/images/井字棋.jpg" alt="井字棋"></p>
<h3 id="项目说明"><a href="#项目说明" class="headerlink" title="项目说明"></a>项目说明</h3><p>这是本人做的第一个关于计算机博弈的程序，用C语言实现了人机对弈，电脑走步是参考<a href="http://www.guokr.com/article/4754/" target="_blank" rel="external">这篇文章</a>，使用纯经验-占角策略，玩家最多与电脑平局，达到了预期效果</p>
<h3 id="电脑策略"><a href="#电脑策略" class="headerlink" title="电脑策略"></a>电脑策略</h3><p>本节引用自<a href="http://www.guokr.com/article/4754/" target="_blank" rel="external">http://www.guokr.com/article/4754/</a>，如有侵权，请联系我</p>
<h4 id="先手先占角"><a href="#先手先占角" class="headerlink" title="先手先占角"></a>先手先占角</h4><p>游戏开始后，先占上一个角（比如左下角吧），那么对方总共有五种本质不同的应对策略：占据靠近你的那条边，占据靠近你的那个角，占据远离你的那条边，占据远离你的那个角（即对角），以及占据正中央的位置。不可思议的是，在这五种策略中，前面四种都是陷阱——如果对方不慎选择了前面四种策略中的任意一种，他就必然输掉。</p>
<p><img src="/images/井字棋1.png" alt="Alt text"></p>
<p>上图显示了在这四种情况下你可以如何把对方一步步逼上绝路。假设对方走正下方，占据了一个靠近你的边（最左边的那个图），你就可以占据正中央来应对，逼迫对方不得不走右上角。这时，只需要在左上角放下一子，你就赢定了——图中出现了两条只差一子的连线，对方不可能兼顾得了。</p>
<p>右边几个图显示了对方第一步棋的其它几种走法。选择合适的位置应对他，都可以在下一步迫使对方只剩一种走法，接下来你便可以下出“一箭双雕”的棋，让对方无法彻底封杀你。</p>
<p>也就是说，当你占据棋盘一角后，在对方下一步棋的八个可选位置中，其中七个位置都是必输的，陷阱摆满了几乎整个棋盘。</p>
<p><img src="/images/井字棋2.png" alt="Alt text"></p>
<p>上图显示了在这四种情况下你可以如何把对方一步步逼上绝路。假设对方走正下方，占据了一个靠近你的边（最左边的那个图），你就可以占据正中央来应对，逼迫对方不得不走右上角。这时，只需要在左上角放下一子，你就赢定了——图中出现了两条只差一子的连线，对方不可能兼顾得了。</p>
<p>右边几个图显示了对方第一步棋的其它几种走法。选择合适的位置应对他，都可以在下一步迫使对方只剩一种走法，接下来你便可以下出“一箭双雕”的棋，让对方无法彻底封杀你。</p>
<p>也就是说，当你占据棋盘一角后，在对方下一步棋的八个可选位置中，其中七个位置都是必输的，陷阱摆满了几乎整个棋盘。在面对“先走一角”的诡异开局时，你的朋友说不准就会慌了手脚，没能冷静地占住中间，决定了必败的命运。</p>
<h4 id="后手还是先占角"><a href="#后手还是先占角" class="headerlink" title="后手还是先占角"></a>后手还是先占角</h4><p><img src="/images/井字棋3.png" alt="Alt text"></p>
<p>作为后行者，你遇到的往往是“先走中间”的经典开局。此时，千万别忘了，先占角仍然是一条金科玉律。如果你不慎走了某条边的位置，对方可就赢定了！对方可以向上面的第一幅图那样，在正右方下子应对，逼迫你把下一步棋落在正左方。此时，对方便可占据右上方的位置，同时产生出两条仅差一子的连线。右边三幅图则显示，如果你在角上应对，最终总会是一盘和棋。</p>
<h3 id="程序实现"><a href="#程序实现" class="headerlink" title="程序实现"></a>程序实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div><div class="line">435</div><div class="line">436</div><div class="line">437</div><div class="line">438</div><div class="line">439</div><div class="line">440</div><div class="line">441</div><div class="line">442</div><div class="line">443</div><div class="line">444</div><div class="line">445</div><div class="line">446</div><div class="line">447</div><div class="line">448</div><div class="line">449</div><div class="line">450</div><div class="line">451</div><div class="line">452</div><div class="line">453</div><div class="line">454</div><div class="line">455</div><div class="line">456</div><div class="line">457</div><div class="line">458</div><div class="line">459</div><div class="line">460</div><div class="line">461</div></pre></td><td class="code"><pre><div class="line">#include &lt;stdio.h&gt;</div><div class="line">#include &quot;stdlib.h&quot;</div><div class="line">#include &quot;time.h&quot;</div><div class="line">#include&lt;ctype.h&gt;      </div><div class="line">#include&lt;conio.h&gt; </div><div class="line">#define MAN 1 </div><div class="line">#define COM -1</div><div class="line">#define MAN_WIN 100</div><div class="line">#define COM_WIN -100</div><div class="line">#define DRAW 0 //平局 </div><div class="line">#define NONE 0  </div><div class="line">#define POSITION 9</div><div class="line">#define STEP 9</div><div class="line">#define random(x) (rand()%(x)) //产生随机数</div><div class="line"></div><div class="line">int board[10];//棋盘 初始默认值为0</div><div class="line">int win_place_sum;</div><div class="line">int angle[4] = &#123; 1,3,7,9 &#125;;</div><div class="line">int edge[4] = &#123; 2,4,6,8 &#125;;</div><div class="line"></div><div class="line">//是否赢了 </div><div class="line">int isWin(int player)</div><div class="line">&#123;</div><div class="line">if (board[1] == player &amp;&amp; board[1] == board[2] &amp;&amp; board[2] == board[3]) return(player);</div><div class="line">if (board[4] == player &amp;&amp; board[4] == board[5] &amp;&amp; board[5] == board[6]) return(player);</div><div class="line">if (board[7] == player &amp;&amp; board[7] == board[8] &amp;&amp; board[8] == board[9]) return(player);</div><div class="line">if (board[1] == player &amp;&amp; board[1] == board[4] &amp;&amp; board[4] == board[7]) return(player);</div><div class="line">if (board[2] == player &amp;&amp; board[2] == board[5] &amp;&amp; board[5] == board[8]) return(player);</div><div class="line">if (board[3] == player &amp;&amp; board[3] == board[6] &amp;&amp; board[6] == board[9]) return(player);</div><div class="line">if (board[1] == player &amp;&amp; board[1] == board[5] &amp;&amp; board[5] == board[9]) return(player);</div><div class="line">if (board[3] == player &amp;&amp; board[3] == board[5] &amp;&amp; board[5] == board[7]) return(player);</div><div class="line">//没人赢返回0</div><div class="line">return NONE;</div><div class="line">&#125;</div><div class="line">int isAngle(int position)</div><div class="line">&#123;</div><div class="line">if (position == 1 || position == 3 || position == 7 || position == 9)</div><div class="line">return position;</div><div class="line">return 0;</div><div class="line">&#125;</div><div class="line"></div><div class="line">int isEdge(int position)</div><div class="line">&#123;</div><div class="line">if (position == 2 || position == 4 || position == 6 || position == 8)</div><div class="line">return position;</div><div class="line">return 0;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//两子成线，返回一个必须要下的位置 </div><div class="line">int checkWinning(int player) &#123;</div><div class="line">int i;</div><div class="line">int win_place = 10;</div><div class="line">win_place_sum = 0;</div><div class="line"></div><div class="line"></div><div class="line">for (i = 1; i &lt; 10; i++) &#123;</div><div class="line">if (board[i] == NONE) &#123;</div><div class="line">board[i] = player; //先假设该处有子进行判断 </div><div class="line">if (isWin(player) == player) &#123;</div><div class="line">board[i] = 0;</div><div class="line">win_place = i;</div><div class="line">win_place_sum++;</div><div class="line">&#125;</div><div class="line">board[i] = 0;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">return win_place;//返回下棋的位置</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">//电脑哥们进行下棋</div><div class="line">int com_play(int step , int lastPosition)</div><div class="line">&#123;</div><div class="line">int i;</div><div class="line"></div><div class="line">//随机数</div><div class="line">int ranNumber; </div><div class="line"></div><div class="line"></div><div class="line">//设置随机数种子</div><div class="line">srand((unsigned int)time(NULL));</div><div class="line"></div><div class="line"></div><div class="line">//第一步电脑走的位置</div><div class="line">int lastComPosition = 0;</div><div class="line"></div><div class="line"></div><div class="line">//能赢的地方</div><div class="line">int win_place = 10;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">int max_win_times = 0;</div><div class="line">//如果第一步，那么电脑先占角</div><div class="line">if ( ( step == 1 ) &amp;&amp; (lastPosition == 0 )) &#123;</div><div class="line">ranNumber = random(4);</div><div class="line">board[angle[ranNumber]] = COM;</div><div class="line">return angle[ranNumber];</div><div class="line">&#125;</div><div class="line">else if (step == 3)</div><div class="line">&#123;</div><div class="line"></div><div class="line">//第二步玩家走角</div><div class="line">if (isAngle(lastPosition) &gt; 0)</div><div class="line">&#123;</div><div class="line">for (i = 0; i &lt; 4; i++)</div><div class="line">&#123;</div><div class="line">if (board[angle[i]] == COM)</div><div class="line">&#123;</div><div class="line">lastComPosition = angle[i];</div><div class="line">// printf(&quot;第一步电脑走的是%d&quot;, lastComPosition);</div><div class="line">break; </div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">//如果走的是靠近边的角,就占对角</div><div class="line">if ((lastPosition + lastComPosition) != 10)</div><div class="line">&#123;</div><div class="line">if (board[10 - lastComPosition] == NONE)</div><div class="line">&#123;</div><div class="line">board[10 - lastComPosition] = COM;</div><div class="line">return 10 - lastComPosition;</div><div class="line">&#125;</div><div class="line">else</div><div class="line">&#123;</div><div class="line">printf(&quot;出错了——1&quot;);</div><div class="line">return 0;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">//如果走的是对角,那么就占其他的角</div><div class="line">else</div><div class="line">&#123;</div><div class="line">while (true)</div><div class="line">&#123;</div><div class="line">ranNumber = random(4);</div><div class="line">if (board[angle[ranNumber]] == NONE)</div><div class="line">&#123;</div><div class="line">board[angle[ranNumber]] = COM;</div><div class="line">return angle[ranNumber];</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">//第二步玩家走的是边</div><div class="line">else if( isEdge(lastPosition) &gt; 0 ) </div><div class="line">&#123;</div><div class="line">if(board[5] == NONE)</div><div class="line">&#123;</div><div class="line">board[5] = COM;</div><div class="line">return 5; </div><div class="line">&#125;</div><div class="line">else</div><div class="line">&#123;</div><div class="line">printf(&quot;中间5被占用了 ...&quot;);</div><div class="line">return 0; </div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div><div class="line">//如果走的是正中间 ，那么电脑走对角</div><div class="line">else if(lastPosition == 5 )</div><div class="line">&#123;</div><div class="line">for (i = 0; i &lt; 4; i++)</div><div class="line">&#123;</div><div class="line">if (board[angle[i]] == COM)</div><div class="line">&#123;</div><div class="line">lastComPosition = angle[i];</div><div class="line">// printf(&quot;第一步电脑走的是%d&quot;, lastComPosition);</div><div class="line">break;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">if (board[10 - lastComPosition] == NONE)</div><div class="line">&#123;</div><div class="line">board[10 - lastComPosition] = COM;</div><div class="line">return 10 - lastComPosition;</div><div class="line">&#125;</div><div class="line">else</div><div class="line">&#123;</div><div class="line">printf(&quot;出错了——2&quot;);</div><div class="line">return 0;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">else if (step == 5)</div><div class="line">&#123;</div><div class="line">win_place = checkWinning(COM);//电脑两子成线</div><div class="line">if (win_place &lt; 10)</div><div class="line">&#123;</div><div class="line">board[win_place] = COM;</div><div class="line">return win_place;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">win_place = checkWinning(MAN); //玩家的棋两子成线</div><div class="line">if (win_place &lt; 10)</div><div class="line">&#123;</div><div class="line">board[win_place] = COM;</div><div class="line">return win_place;</div><div class="line">&#125;</div><div class="line">//如果没有能赢的地方,则占角</div><div class="line">else</div><div class="line">&#123;</div><div class="line">for (i = 0; i &lt; 4; i++)</div><div class="line">&#123;</div><div class="line">if (board[angle[i]] == NONE)</div><div class="line">&#123;</div><div class="line">board[angle[i]] = COM;</div><div class="line"></div><div class="line">if (checkWinning(COM) &lt; 10 &amp;&amp; max_win_times &lt; win_place_sum)</div><div class="line">&#123;</div><div class="line">max_win_times = win_place_sum; //能赢的次数</div><div class="line">win_place = angle[i];</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">board[angle[i]] = NONE;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">board[win_place] = COM;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div><div class="line">else if(step == 2 )</div><div class="line">&#123;</div><div class="line">if (board[5] == NONE)</div><div class="line">&#123;</div><div class="line">board[5] = COM;</div><div class="line">return 5;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">else</div><div class="line">while (true)</div><div class="line">&#123;</div><div class="line">ranNumber = random(4);</div><div class="line">if (board[angle[ranNumber]] == NONE )</div><div class="line">&#123;</div><div class="line">board[angle[ranNumber]] = COM;</div><div class="line">return angle[ranNumber];</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">else</div><div class="line">&#123;</div><div class="line">win_place = checkWinning(COM);//电脑两子成线</div><div class="line">if (win_place &lt; 10)</div><div class="line">&#123;</div><div class="line">board[win_place] = COM;</div><div class="line">return win_place;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">win_place = checkWinning(MAN); //玩家的棋两子成线</div><div class="line">if (win_place &lt; 10)</div><div class="line">&#123;</div><div class="line">board[win_place] = COM;</div><div class="line">return win_place;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">for (i = 1; i &lt;= 9; i++) &#123;</div><div class="line">if (board[i] == NONE)</div><div class="line">&#123;</div><div class="line">board[i] = COM;</div><div class="line">printf(&quot;最后一步？？&quot;);</div><div class="line">return i;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div><div class="line">printf(&quot;COM-error&quot;);</div><div class="line">return 10;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">//玩家进行下棋</div><div class="line">int person_play()</div><div class="line">&#123;</div><div class="line">int row;</div><div class="line">int col;</div><div class="line">int index;</div><div class="line"></div><div class="line"></div><div class="line">do</div><div class="line">&#123;</div><div class="line">printf(&quot;亲~轮到你走一步了!!!请输入行坐标和列坐标 如  1 1 为左上角第一个点  2 2 为正中间的点   （1和1之间有个空格，否则错误）&quot;);</div><div class="line">scanf(&quot;%d&quot;, &amp;row);</div><div class="line">scanf(&quot;%d&quot;, &amp;col);</div><div class="line">index = (row - 1) * 3 + col;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">if (board[index] == NONE)</div><div class="line">&#123;</div><div class="line">board[index] = MAN;</div><div class="line">return index;</div><div class="line">&#125;</div><div class="line">printf(&quot;输入的下标不合法 ，越界或者此处已经有棋子存在 !!!! 请重新输入下标 ：）&quot;);</div><div class="line"></div><div class="line"></div><div class="line">&#125; while (true);</div><div class="line"></div><div class="line"></div><div class="line">printf(&quot;MAN-error&quot;);</div><div class="line">return 10;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">//画棋盘</div><div class="line">void display()</div><div class="line">&#123;</div><div class="line">char board_dis[10] = &#123; &quot;&quot; &#125;;</div><div class="line">int i;</div><div class="line">for (i = 1; i &lt; 10; i++)</div><div class="line">&#123;</div><div class="line">if (board[i] == COM) &#123;</div><div class="line">board_dis[i] = &apos;X&apos;;</div><div class="line">&#125;</div><div class="line">if (board[i] == MAN) &#123;</div><div class="line">board_dis[i] = &apos;O&apos;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div><div class="line">for (i = 0; i &lt; 10; i++) &#123;</div><div class="line">printf(&quot;-&quot;);</div><div class="line">&#125;</div><div class="line">printf(&quot;\n|&quot;);</div><div class="line">for (i = 1; i &lt;= 3; i++) &#123;</div><div class="line">printf(&quot;%c |&quot;, board_dis[i]);</div><div class="line">&#125;</div><div class="line">printf(&quot;\n&quot;);</div><div class="line">for (i = 0; i &lt; 10; i++) &#123;</div><div class="line">printf(&quot;-&quot;);</div><div class="line">&#125;</div><div class="line">printf(&quot;\n|&quot;);</div><div class="line">for (i = 4; i &lt;= 6; i++) &#123;</div><div class="line">printf(&quot;%c |&quot;, board_dis[i]);</div><div class="line">&#125;</div><div class="line">printf(&quot;\n&quot;);</div><div class="line">for (i = 0; i &lt; 10; i++) &#123;</div><div class="line">printf(&quot;-&quot;);</div><div class="line">&#125;</div><div class="line">printf(&quot;\n|&quot;);</div><div class="line">for (i = 7; i &lt;= 9; i++) &#123;</div><div class="line">printf(&quot;%c |&quot;, board_dis[i]);</div><div class="line">&#125;</div><div class="line">printf(&quot;\n&quot;);</div><div class="line">for (i = 0; i &lt; 10; i++) &#123;</div><div class="line">printf(&quot;-&quot;);</div><div class="line">&#125;</div><div class="line">printf(&quot;\n&quot;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">void main()</div><div class="line">&#123;</div><div class="line">char c;</div><div class="line">int i;</div><div class="line">int step = 1; </div><div class="line">int lastPosition = 0;</div><div class="line"></div><div class="line"></div><div class="line">for (i = 0; i&lt;30; i++)</div><div class="line">printf(&quot;*&quot;);</div><div class="line">printf(&quot;\n*hello,welcome to this game!!*\n&quot;);</div><div class="line">for (i = 0; i&lt;30; i++)</div><div class="line">printf(&quot;*&quot;);</div><div class="line">printf(&quot;\nDo you want to play first? y -你先走  , n-电脑先走&quot;);</div><div class="line">for (c = getche(); c != &apos;Y&apos;&amp;&amp;c != &apos;y&apos;&amp;&amp;c != &apos;N&apos;&amp;&amp;c != &apos;n&apos;; c = getche());</div><div class="line">if (c == &apos;Y&apos; || c == &apos;y&apos;) </div><div class="line">&#123; </div><div class="line">display();</div><div class="line">for (step = 1; step &lt;= STEP; )</div><div class="line">&#123;</div><div class="line">lastPosition = person_play();</div><div class="line">display();</div><div class="line">if (MAN == isWin(MAN))</div><div class="line">&#123;</div><div class="line">printf(&quot;恭喜您 ， 您获胜了 &quot;);</div><div class="line">break;</div><div class="line">&#125;</div><div class="line">step++;</div><div class="line">if (step == 10) &#123;</div><div class="line">break;</div><div class="line">&#125;</div><div class="line">lastPosition = com_play(step,lastPosition);</div><div class="line">display();</div><div class="line"></div><div class="line"></div><div class="line">if (COM == isWin(COM))</div><div class="line">&#123;</div><div class="line">printf(&quot;很遗憾 ，电脑获胜了 &quot;);</div><div class="line">break;</div><div class="line">&#125;</div><div class="line">step++;</div><div class="line">&#125;</div><div class="line">if (isWin(COM) == NONE &amp;&amp; isWin(MAN) == NONE &amp;&amp; step == 10)</div><div class="line">&#123;</div><div class="line">printf(&quot;平局&quot;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">else if (c == &apos;N&apos; || c == &apos;n&apos;)</div><div class="line">&#123;</div><div class="line">for (step = 1; step &lt;= STEP; )</div><div class="line">&#123;</div><div class="line"></div><div class="line"></div><div class="line">lastPosition = com_play(step, lastPosition);</div><div class="line">display();</div><div class="line"></div><div class="line"></div><div class="line">if (COM == isWin(COM))</div><div class="line">&#123;</div><div class="line">printf(&quot;很遗憾 ，电脑获胜了 &quot;);</div><div class="line">break;</div><div class="line">&#125;</div><div class="line">step++;</div><div class="line"></div><div class="line"></div><div class="line">if (step == 10) &#123;</div><div class="line">break;</div><div class="line">&#125;</div><div class="line">lastPosition = person_play();</div><div class="line"></div><div class="line">if (MAN == isWin(MAN))</div><div class="line">&#123;</div><div class="line">printf(&quot;恭喜您 ， 您获胜了 &quot;);</div><div class="line">break;</div><div class="line">&#125;</div><div class="line">step++;</div><div class="line"></div><div class="line">&#125;</div><div class="line">if (isWin(COM) == NONE &amp;&amp; isWin(MAN) == NONE &amp;&amp; step == 10)</div><div class="line">&#123;</div><div class="line">printf(&quot;平局&quot;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">getch();</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;井字棋介绍&quot;&gt;&lt;a href=&quot;#井字棋介绍&quot; class=&quot;headerlink&quot; title=&quot;井字棋介绍&quot;&gt;&lt;/a&gt;井字棋介绍&lt;/h3&gt;&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;井字棋，英文名叫Tic-Tac-Toe，是一种在3*3格子上进
    
    </summary>
    
      <category term="计算机博弈" scheme="http://tusko.cn/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8D%9A%E5%BC%88/"/>
    
    
      <category term="计算机博弈" scheme="http://tusko.cn/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8D%9A%E5%BC%88/"/>
    
  </entry>
  
</feed>
